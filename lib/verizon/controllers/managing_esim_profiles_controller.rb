# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # ManagingESIMProfilesController
  class ManagingESIMProfilesController < BaseController
    # Activate a device with either a lead or local profile.
    # @param [GIOProfileRequest] body Required parameter: Device Profile Query
    # @return [GIORequestResponse] response from the API call
    def activate_a_device_profile(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/devices/profile/actions/activate',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GIORequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                GIORestErrorResponseException))
        .execute
    end

    # Enable a device lead or local profile.
    # @param [DeviceProfileRequest] body Required parameter: Device Profile
    # Query
    # @return [GIORequestResponse] response from the API call
    def enable_a_device_profile(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/devices/profile/actions/enable',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GIORequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                GIORestErrorResponseException))
        .execute
    end

    # Deactivate the lead or local profile. **Note:** to reactivate the profile,
    # use the **Activate** endpoint above.
    # @param [GIODeactivateDeviceProfileRequest] body Required parameter: Device
    # Profile Query
    # @return [GIORequestResponse] response from the API call
    def deactivate_a_device_profile(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/devices/profile/actions/deactivate',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GIORequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                GIORestErrorResponseException))
        .execute
    end

    # Enable the Global IoT Orchestration device profile for download.
    # @param [DeviceProfileRequest] body Required parameter: Device Profile
    # Query
    # @return [GIORequestResponse] response from the API call
    def enable_a_device_profile_for_download(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/devices/profile/actions/download_enable',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GIORequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                GIORestErrorResponseException))
        .execute
    end

    # Download a Global IoT Orchestration device profile.
    # @param [DeviceProfileRequest] body Required parameter: Device Profile
    # Query
    # @return [GIORequestResponse] response from the API call
    def download_a_device_profile(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/devices/profile/actions/download',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GIORequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                GIORestErrorResponseException))
        .execute
    end

    # Delete a device profile for Global IoT Orchestration. **Note:** the
    # profile must be deactivated first!
    # @param [DeviceProfileRequest] body Required parameter: Device Profile
    # Query
    # @return [GIORequestResponse] response from the API call
    def delete_a_device_profile(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/devices/profile/actions/delete',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GIORequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                GIORestErrorResponseException))
        .execute
    end
  end
end
