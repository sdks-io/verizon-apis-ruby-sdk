# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # ServiceLaunchRequestsController
  class ServiceLaunchRequestsController < BaseController
    # Get information related to a service launch request.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] user_name Required parameter: Example:
    # @param [UUID | String] id Optional parameter: Service launch request Id.
    # @param [String] correlation_id Optional parameter: Example:
    # @param [String] name Optional parameter: Service request name.
    # @param [Integer] offset Optional parameter: Example:
    # @param [Integer] limit Optional parameter: Example:
    # @return [ServiceLaunchRequestsResult] response from the API call
    def get_service_launch_request(account_name,
                                   user_name,
                                   id: nil,
                                   correlation_id: nil,
                                   name: nil,
                                   offset: nil,
                                   limit: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/v1/service/launch/request',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .header_param(new_parameter(user_name, key: 'userName'))
                   .query_param(new_parameter(id, key: 'id'))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .query_param(new_parameter(name, key: 'name'))
                   .query_param(new_parameter(offset, key: 'offset'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceLaunchRequestsResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceLaunchResultException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceLaunchResultException)
                   .local_error('403',
                                'Forbidden.',
                                EdgeServiceLaunchResultException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceLaunchResultException)
                   .local_error('415',
                                'Unsupported media type.',
                                EdgeServiceLaunchResultException)
                   .local_error('429',
                                'Too many requests.',
                                EdgeServiceLaunchResultException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceLaunchResultException)
                   .local_error('default',
                                'Unexpected error.',
                                EdgeServiceLaunchResultException))
        .execute
    end

    # Create a request for launching a service.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] user_name Required parameter: Example:
    # @param [String] correlation_id Optional parameter: Example:
    # @param [CreateServiceLaunchRequest] body Optional parameter: Request for
    # launching a service.
    # @return [ServiceLaunchRequestResult] response from the API call
    def create_service_launch_request(account_name,
                                      user_name,
                                      correlation_id: nil,
                                      body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/service/launch/request',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .header_param(new_parameter(user_name, key: 'userName'))
                   .header_param(new_parameter('*/*', key: 'Content-Type'))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceLaunchRequestResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'HTTP 400 Bad Request.',
                                EdgeServiceLaunchResultException)
                   .local_error('401',
                                'HTTP 401 Unauthorized.',
                                EdgeServiceLaunchResultException)
                   .local_error('404',
                                'HTTP 404 Not found.',
                                EdgeServiceLaunchResultException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceLaunchResultException)
                   .local_error('default',
                                'HTTP 500 Internal Server Error.',
                                EdgeServiceLaunchResultException))
        .execute
    end

    # This endpoint allows the user to submit a service request that describes
    # the resource requirements of a service. This API submit an object of the
    # service request and moves it to STATE from “DRAFT”  to “INSTANTIATED” and
    # triggers the launch flow.
    # @param [UUID | String] id Required parameter: A unique Id assigned to the
    # request by system calling API.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] user_name Required parameter: Example:
    # @param [String] correlation_id Optional parameter: Example:
    # @return [ServiceLaunchRequestResult] response from the API call
    def submit_service_launch_request(id,
                                      account_name,
                                      user_name,
                                      correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/service/launch/request/{id}/submit',
                                     Server::SERVICES)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .header_param(new_parameter(user_name, key: 'userName'))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceLaunchRequestResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'HTTP 400 Bad Request.',
                                EdgeServiceLaunchResultException)
                   .local_error('401',
                                'HTTP 401 Unauthorized.',
                                EdgeServiceLaunchResultException)
                   .local_error('412',
                                'Precondition Failed.',
                                EdgeServiceLaunchResultException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceLaunchResultException)
                   .local_error('default',
                                'HTTP 500 Internal Server Error.',
                                EdgeServiceLaunchResultException))
        .execute
    end
  end
end
