# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # GlobalReportingController
  class GlobalReportingController < BaseController
    # Retrieve the provisioning history of a specific device or devices.
    # @param [ESIMProvhistoryRequest] body Required parameter: Device
    # Provisioning History
    # @return [ApiResponse]  the complete http response with raw body and status code.
    def deviceprovhistory_using_post(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v2/devices/history/actions/list',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ESIMRequestResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad request',
                                 ESIMRestErrorResponseException)
                    .local_error('401',
                                 'Unauthorized',
                                 ESIMRestErrorResponseException)
                    .local_error('403',
                                 'Forbidden',
                                 ESIMRestErrorResponseException)
                    .local_error('404',
                                 'Not Found / Does not exist',
                                 ESIMRestErrorResponseException)
                    .local_error('406',
                                 'Format / Request Unacceptable',
                                 ESIMRestErrorResponseException)
                    .local_error('429',
                                 'Too many requests',
                                 ESIMRestErrorResponseException)
                    .local_error('default',
                                 'Error response',
                                 ESIMRestErrorResponseException))
        .execute
    end

    # Retrieve a list of all devices associated with an account.
    # @param [ESIMGlobalDeviceList] body Required parameter: Device List
    # @return [ApiResponse]  the complete http response with raw body and status code.
    def retrieve_global_list(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v2/devices/actions/list',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ESIMRequestResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad request',
                                 ESIMRestErrorResponseException)
                    .local_error('401',
                                 'Unauthorized',
                                 ESIMRestErrorResponseException)
                    .local_error('403',
                                 'Forbidden',
                                 ESIMRestErrorResponseException)
                    .local_error('404',
                                 'Not Found / Does not exist',
                                 ESIMRestErrorResponseException)
                    .local_error('406',
                                 'Format / Request Unacceptable',
                                 ESIMRestErrorResponseException)
                    .local_error('429',
                                 'Too many requests',
                                 ESIMRestErrorResponseException)
                    .local_error('default',
                                 'Error response',
                                 ESIMRestErrorResponseException))
        .execute
    end
  end
end
