# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # ServiceClaimsController
  class ServiceClaimsController < BaseController
    # Fetch all service's claim(s) associated with a service. Service claims are
    # generated based on service's compatibility with different cloud service
    # provider.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_id Required parameter: Auto-generated Id of the
    # claim whose information needs to be fetched.
    # @param [String] correlation_id Optional parameter: Example:
    # @param [String] claim_status Optional parameter: Queries with claim status
    # on the claims.
    # @param [String] q Optional parameter: Use the comma (,) character to
    # separate multiple values,eg claimType=Public
    # MEC:claims.sandBoxState=NOT_STARTED,STARTED.
    # @param [Integer] limit Optional parameter: Number of items to return.
    # @param [Integer] off_set Optional parameter: Id of the last respose value
    # in the previous list.
    # @param [String] sort_key Optional parameter: Sorts the response by an
    # attribute. Default is createdDate.
    # @param [SortDirectionEnum] sort_dir Optional parameter: Sorts the
    # response. Use asc for ascending or desc for descending order. The default
    # is desc.
    # @param [TrueClass | FalseClass] details_flag Optional parameter: Default
    # as true. If it is true then it will return all details.
    # @return [ServiceClaims] response from the API call
    def list_service_claims(account_name,
                            service_id,
                            correlation_id: nil,
                            claim_status: nil,
                            q: nil,
                            limit: nil,
                            off_set: nil,
                            sort_key: 'createdDate',
                            sort_dir: nil,
                            details_flag: true)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/v1/service/{serviceId}/claims',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_id, key: 'serviceId')
                                    .should_encode(true))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .query_param(new_parameter(claim_status, key: 'claimStatus'))
                   .query_param(new_parameter(q, key: 'q'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .query_param(new_parameter(off_set, key: 'offSet'))
                   .query_param(new_parameter(sort_key, key: 'sortKey'))
                   .query_param(new_parameter(sort_dir, key: 'sortDir'))
                   .query_param(new_parameter(details_flag, key: 'detailsFlag'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceClaims.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Associate an existing cloud credential with a service's claim which will
    # be used to connect to user's cloud provider.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_id Required parameter: System generated unique
    # identifier of the service which user is using.
    # @param [String] claim_id Required parameter: System generated unique
    # identifier for the claim which user is using.
    # @param [CSPProfileIdRequest] body Required parameter: Example:
    # @param [String] correlation_id Optional parameter: Example:
    # @return [AssociateCloudCredentialResult] response from the API call
    def associate_cloud_credential_with_service_claim(account_name,
                                                      service_id,
                                                      claim_id,
                                                      body,
                                                      correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/services/{serviceId}/claims/{claimId}/associateCspProfile',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_id, key: 'serviceId')
                                    .should_encode(true))
                   .template_param(new_parameter(claim_id, key: 'claimId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AssociateCloudCredentialResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not Found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Mark a service's claim status as complete post successful verification of
    # sandbox testing in the respective sandbox environment.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_id Required parameter: System generated unique
    # identifier of the service which user is using.
    # @param [String] claim_id Required parameter: System generated unique
    # identifier of the claim which user is using.
    # @param [String] correlation_id Optional parameter: Example:
    # @return [void] response from the API call
    def mark_service_claim_status_as_completed(account_name,
                                               service_id,
                                               claim_id,
                                               correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/services/{serviceId}/claims/{claimId}/claimStatusCompleted',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_id, key: 'serviceId')
                                    .should_encode(true))
                   .template_param(new_parameter(claim_id, key: 'claimId')
                                    .should_encode(true))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .is_response_void(true)
                   .is_api_response(true)
                   .local_error('400',
                                'Bad request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not Found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Using this API user can update service's claim status as complete/verified
    # etc.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_id Required parameter: System generated unique
    # identifier of the service which user is using.
    # @param [String] claim_id Required parameter: System generated unique
    # identifier of the claim which user is using.
    # @param [ClaimStatusRequest] body Required parameter: Example:
    # @param [String] correlation_id Optional parameter: Example:
    # @return [void] response from the API call
    def update_service_claim_status(account_name,
                                    service_id,
                                    claim_id,
                                    body,
                                    correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/services/{serviceId}/claims/{claimId}/claimStatus',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_id, key: 'serviceId')
                                    .should_encode(true))
                   .template_param(new_parameter(claim_id, key: 'claimId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .is_response_void(true)
                   .is_api_response(true)
                   .local_error('400',
                                'Bad request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not Found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end
  end
end
