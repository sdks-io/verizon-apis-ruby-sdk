# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # ServiceInstanceOperationsController
  class ServiceInstanceOperationsController < BaseController
    # Resumes a suspended Service Instance
    # @param [String] service_instance_id Required parameter: Example:
    # @param [String] user_id Required parameter: Example:
    # @param [String] request_id Required parameter: Example:
    # @param [UserRoleEnum] user_role Required parameter: Example:
    # @param [String] customer_id Required parameter: Example:
    # @param [String] correlation_id Optional parameter: Example:
    # @return [ServiceResumeResult] response from the API call
    def service_resume(service_instance_id,
                       user_id,
                       request_id,
                       user_role,
                       customer_id,
                       correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/service/instances/{serviceInstanceId}/resume',
                                     Server::SERVICES)
                   .template_param(new_parameter(service_instance_id, key: 'serviceInstanceId')
                                    .should_encode(true))
                   .header_param(new_parameter(user_id, key: 'userId'))
                   .header_param(new_parameter(request_id, key: 'requestId'))
                   .header_param(new_parameter(user_role, key: 'user_role'))
                   .header_param(new_parameter(customer_id, key: 'customerId'))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceResumeResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceLaunchResultException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceLaunchResultException)
                   .local_error('403',
                                'Forbidden.',
                                EdgeServiceLaunchResultException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceLaunchResultException)
                   .local_error('415',
                                'Unsupported media type.',
                                EdgeServiceLaunchResultException)
                   .local_error('429',
                                'Too many requests.',
                                EdgeServiceLaunchResultException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceLaunchResultException)
                   .local_error('default',
                                'Unexpected error.',
                                EdgeServiceLaunchResultException))
        .execute
    end

    # Suspend a service Instance
    # @param [String] service_instance_id Required parameter: Example:
    # @param [String] user_id Required parameter: Example:
    # @param [String] request_id Required parameter: Example:
    # @param [UserRoleEnum] user_role Required parameter: Example:
    # @param [String] customer_id Required parameter: Example:
    # @param [String] correlation_id Optional parameter: Example:
    # @return [ServiceResumeResult] response from the API call
    def service_suspend(service_instance_id,
                        user_id,
                        request_id,
                        user_role,
                        customer_id,
                        correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/service/instances/{serviceInstanceId}/suspend',
                                     Server::SERVICES)
                   .template_param(new_parameter(service_instance_id, key: 'serviceInstanceId')
                                    .should_encode(true))
                   .header_param(new_parameter(user_id, key: 'userId'))
                   .header_param(new_parameter(request_id, key: 'requestId'))
                   .header_param(new_parameter(user_role, key: 'user_role'))
                   .header_param(new_parameter(customer_id, key: 'customerId'))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceResumeResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceLaunchResultException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceLaunchResultException)
                   .local_error('403',
                                'Forbidden.',
                                EdgeServiceLaunchResultException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceLaunchResultException)
                   .local_error('415',
                                'Unsupported media type.',
                                EdgeServiceLaunchResultException)
                   .local_error('429',
                                'Too many requests.',
                                EdgeServiceLaunchResultException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceLaunchResultException)
                   .local_error('default',
                                'Unexpected error.',
                                EdgeServiceLaunchResultException))
        .execute
    end

    # remove a service Instance
    # @param [String] service_instance_id Required parameter: Example:
    # @param [String] user_id Required parameter: Example:
    # @param [String] request_id Required parameter: Example:
    # @param [UserRoleEnum] user_role Required parameter: Example:
    # @param [String] customer_id Required parameter: Example:
    # @param [String] correlation_id Optional parameter: Example:
    # @return [ServiceResumeResult] response from the API call
    def service_remove(service_instance_id,
                       user_id,
                       request_id,
                       user_role,
                       customer_id,
                       correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/v1/service/instances/{serviceInstanceId}/remove',
                                     Server::SERVICES)
                   .template_param(new_parameter(service_instance_id, key: 'serviceInstanceId')
                                    .should_encode(true))
                   .header_param(new_parameter(user_id, key: 'userId'))
                   .header_param(new_parameter(request_id, key: 'requestId'))
                   .header_param(new_parameter(user_role, key: 'user_role'))
                   .header_param(new_parameter(customer_id, key: 'customerId'))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceResumeResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceLaunchResultException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceLaunchResultException)
                   .local_error('403',
                                'Forbidden.',
                                EdgeServiceLaunchResultException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceLaunchResultException)
                   .local_error('415',
                                'Unsupported media type.',
                                EdgeServiceLaunchResultException)
                   .local_error('429',
                                'Too many requests.',
                                EdgeServiceLaunchResultException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceLaunchResultException)
                   .local_error('default',
                                'Unexpected error.',
                                EdgeServiceLaunchResultException))
        .execute
    end

    # upgrade a service Instance
    # @param [String] service_instance_id Required parameter: Example:
    # @param [String] user_id Required parameter: Example:
    # @param [String] request_id Required parameter: Example:
    # @param [UserRoleEnum] user_role Required parameter: Example:
    # @param [String] customer_id Required parameter: Example:
    # @param [String] correlation_id Optional parameter: Example:
    # @return [ServiceResumeResult] response from the API call
    def service_upgrade(service_instance_id,
                        user_id,
                        request_id,
                        user_role,
                        customer_id,
                        correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/service/instances/{serviceInstanceId}/upgrade',
                                     Server::SERVICES)
                   .template_param(new_parameter(service_instance_id, key: 'serviceInstanceId')
                                    .should_encode(true))
                   .header_param(new_parameter(user_id, key: 'userId'))
                   .header_param(new_parameter(request_id, key: 'requestId'))
                   .header_param(new_parameter(user_role, key: 'user_role'))
                   .header_param(new_parameter(customer_id, key: 'customerId'))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceResumeResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceLaunchResultException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceLaunchResultException)
                   .local_error('403',
                                'Forbidden.',
                                EdgeServiceLaunchResultException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceLaunchResultException)
                   .local_error('415',
                                'Unsupported media type.',
                                EdgeServiceLaunchResultException)
                   .local_error('429',
                                'Too many requests.',
                                EdgeServiceLaunchResultException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceLaunchResultException)
                   .local_error('default',
                                'Unexpected error.',
                                EdgeServiceLaunchResultException))
        .execute
    end
  end
end
