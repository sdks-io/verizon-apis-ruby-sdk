# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # HyperPreciseLocationCallbacksController
  class HyperPreciseLocationCallbacksController < BaseController
    # Find registered callback listener for account by account number.
    # @param [String] account_number Required parameter: A unique identifier for
    # an account.
    # @return [Array[CallbackCreated]] response from the API call
    def list_registered_callbacks(account_number)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/callbacks',
                                     Server::HYPER_PRECISE_LOCATION)
                   .query_param(new_parameter(account_number, key: 'accountNumber'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CallbackCreated.method(:from_hash))
                   .is_api_response(true)
                   .is_response_array(true)
                   .local_error('400',
                                'Bad request.',
                                HyperPreciseLocationResultException)
                   .local_error('401',
                                'Unauthorized request. Access token is missing or invalid.',
                                HyperPreciseLocationResultException)
                   .local_error('403',
                                'Forbidden request.',
                                HyperPreciseLocationResultException)
                   .local_error('404',
                                'Bad request. Not found.',
                                HyperPreciseLocationResultException)
                   .local_error('409',
                                'Bad request. Conflict state.',
                                HyperPreciseLocationResultException)
                   .local_error('500',
                                'Internal Server Error.',
                                HyperPreciseLocationResultException))
        .execute
    end

    # Registers a URL at which an account receives asynchronous responses and
    # other messages from a ThingSpace Platform callback service. The messages
    # are REST messages. You are responsible for creating and running a
    # listening process on your server at that URL to receive and parse the
    # messages.
    # @param [String] account_number Required parameter: A unique identifier for
    # an account.
    # @param [HyperPreciseLocationCallback] body Required parameter: Example:
    # @return [CallbackRegistered] response from the API call
    def register_callback(account_number,
                          body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/callbacks',
                                     Server::HYPER_PRECISE_LOCATION)
                   .query_param(new_parameter(account_number, key: 'accountNumber'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CallbackRegistered.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad request.',
                                HyperPreciseLocationResultException)
                   .local_error('401',
                                'Unauthorized request. Access token is missing or invalid.',
                                HyperPreciseLocationResultException)
                   .local_error('403',
                                'Forbidden request.',
                                HyperPreciseLocationResultException)
                   .local_error('404',
                                'Bad request. Not found.',
                                HyperPreciseLocationResultException)
                   .local_error('409',
                                'Bad request. Conflict state.',
                                HyperPreciseLocationResultException)
                   .local_error('500',
                                'Internal Server Error.',
                                HyperPreciseLocationResultException))
        .execute
    end

    # Stops ThingSpace from sending callback messages for the specified account
    # and listener name.
    # @param [String] account_number Required parameter: A unique identifier for
    # a account.
    # @param [String] service Required parameter: The name of the callback
    # service that will be deleted.
    # @return [void] response from the API call
    def deregister_callback(account_number,
                            service)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/callbacks',
                                     Server::HYPER_PRECISE_LOCATION)
                   .query_param(new_parameter(account_number, key: 'accountNumber'))
                   .query_param(new_parameter(service, key: 'service'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .is_response_void(true)
                   .is_api_response(true)
                   .local_error('400',
                                'Bad request.',
                                HyperPreciseLocationResultException)
                   .local_error('401',
                                'Unauthorized request. Access token is missing or invalid.',
                                HyperPreciseLocationResultException)
                   .local_error('403',
                                'Forbidden request.',
                                HyperPreciseLocationResultException)
                   .local_error('404',
                                'Bad request. Not found.',
                                HyperPreciseLocationResultException)
                   .local_error('409',
                                'Bad request. Conflict state.',
                                HyperPreciseLocationResultException)
                   .local_error('500',
                                'Internal Server Error.',
                                HyperPreciseLocationResultException))
        .execute
    end
  end
end
