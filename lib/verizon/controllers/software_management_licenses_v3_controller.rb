# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SoftwareManagementLicensesV3Controller
  class SoftwareManagementLicensesV3Controller < BaseController
    # The endpoint allows user to list license usage.
    # @param [String] acc Required parameter: Account identifier.
    # @param [String] last_seen_device_id Optional parameter: Last seen device
    # identifier.
    # @return [V3LicenseSummary] response from the API call
    def get_account_licenses_status(acc,
                                    last_seen_device_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/licenses/{acc}',
                                     Server::SOFTWARE_MANAGEMENT_V3)
                   .template_param(new_parameter(acc, key: 'acc')
                                    .should_encode(true))
                   .query_param(new_parameter(last_seen_device_id, key: 'lastSeenDeviceId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(V3LicenseSummary.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV3ResultException))
        .execute
    end

    # This endpoint allows user to assign licenses to a list of devices.
    # @param [String] acc Required parameter: Account identifier.
    # @param [V3LicenseIMEI] body Required parameter: License assignment.
    # @return [V3LicenseAssignedRemovedResult] response from the API call
    def assign_licenses_to_devices(acc,
                                   body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/licenses/{acc}/assign',
                                     Server::SOFTWARE_MANAGEMENT_V3)
                   .template_param(new_parameter(acc, key: 'acc')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(V3LicenseAssignedRemovedResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV3ResultException))
        .execute
    end

    # This endpoint allows user to remove licenses from a list of devices.
    # @param [String] acc Required parameter: Account identifier.
    # @param [V3LicenseIMEI] body Required parameter: License removal.
    # @return [V3LicenseAssignedRemovedResult] response from the API call
    def remove_licenses_from_devices(acc,
                                     body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/licenses/{acc}/remove',
                                     Server::SOFTWARE_MANAGEMENT_V3)
                   .template_param(new_parameter(acc, key: 'acc')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(V3LicenseAssignedRemovedResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV3ResultException))
        .execute
    end
  end
end
