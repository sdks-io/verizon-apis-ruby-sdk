# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # CampaignsV3Controller
  class CampaignsV3Controller < BaseController
    # This endpoint allows a user to schedule a firmware upgrade for a list of
    # devices.
    # @param [String] acc Required parameter: Account identifier.
    # @param [CampaignFirmwareUpgrade] body Required parameter: Firmware upgrade
    # information.
    # @return [FirmwareCampaign] response from the API call
    def schedule_campaign_firmware_upgrade(acc,
                                           body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/campaigns/firmware/{acc}',
                                     Server::SOFTWARE_MANAGEMENT_V3)
                   .template_param(new_parameter(acc, key: 'acc')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(FirmwareCampaign.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV3ResultException))
        .execute
    end

    # This endpoint allows user to Add or Remove devices to an existing
    # campaign.
    # @param [String] acc Required parameter: Account identifier.
    # @param [String] campaign_id Required parameter: Unique identifier of a
    # campaign.
    # @param [V3AddOrRemoveDeviceRequest] body Required parameter: Add or remove
    # device to existing upgrade information.
    # @return [V3AddOrRemoveDeviceResult] response from the API call
    def update_campaign_firmware_devices(acc,
                                         campaign_id,
                                         body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/campaigns/firmware/{acc}/{campaignId}',
                                     Server::SOFTWARE_MANAGEMENT_V3)
                   .template_param(new_parameter(acc, key: 'acc')
                                    .should_encode(true))
                   .template_param(new_parameter(campaign_id, key: 'campaignId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(V3AddOrRemoveDeviceResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV3ResultException))
        .execute
    end

    # This endpoint allows user to change campaign dates and time windows.
    # Fields which need to remain unchanged should be also provided.
    # @param [String] acc Required parameter: Account identifier.
    # @param [String] campaign_id Required parameter: Firmware upgrade
    # information.
    # @param [V3ChangeCampaignDatesRequest] body Required parameter: New dates
    # and time windows.
    # @return [FirmwareCampaign] response from the API call
    def update_campaign_dates(acc,
                              campaign_id,
                              body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/campaigns/firmware/{acc}/{campaignId}/dates',
                                     Server::SOFTWARE_MANAGEMENT_V3)
                   .template_param(new_parameter(acc, key: 'acc')
                                    .should_encode(true))
                   .template_param(new_parameter(campaign_id, key: 'campaignId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(FirmwareCampaign.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV3ResultException))
        .execute
    end

    # This endpoint allows the user to retrieve campaign level information for a
    # specified campaign.
    # @param [String] acc Required parameter: Account identifier.
    # @param [String] campaign_id Required parameter: Firmware upgrade
    # identifier.
    # @return [Campaign] response from the API call
    def get_campaign_information(acc,
                                 campaign_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/campaigns/{acc}/{campaignId}',
                                     Server::SOFTWARE_MANAGEMENT_V3)
                   .template_param(new_parameter(acc, key: 'acc')
                                    .should_encode(true))
                   .template_param(new_parameter(campaign_id, key: 'campaignId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Campaign.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV3ResultException))
        .execute
    end

    # This endpoint allows user to cancel a firmware campaign. A firmware
    # campaign already started can not be cancelled.
    # @param [String] acc Required parameter: Account identifier.
    # @param [String] campaign_id Required parameter: Firmware upgrade
    # information.
    # @return [FotaV3SuccessResult] response from the API call
    def cancel_campaign(acc,
                        campaign_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/campaigns/{acc}/{campaignId}',
                                     Server::SOFTWARE_MANAGEMENT_V3)
                   .template_param(new_parameter(acc, key: 'acc')
                                    .should_encode(true))
                   .template_param(new_parameter(campaign_id, key: 'campaignId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(FotaV3SuccessResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV3ResultException))
        .execute
    end
  end
end
