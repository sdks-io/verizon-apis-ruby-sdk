# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DeviceLocationCallbacksController
  class DeviceLocationCallbacksController < BaseController
    # Returns a list of all registered callback URLs for the account.
    # @param [String] account Required parameter: Account number.
    # @return [Array[DeviceLocationCallback]] response from the API call
    def list_registered_callbacks(account)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/callbacks/{account}',
                                     Server::DEVICE_LOCATION)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceLocationCallback.method(:from_hash))
                   .is_api_response(true)
                   .is_response_array(true)
                   .local_error('400',
                                'Error response.',
                                DeviceLocationResultException))
        .execute
    end

    # Provide a URL to receive messages from a ThingSpace callback service.
    # @param [String] account Required parameter: Account number.
    # @param [DeviceLocationCallback] body Required parameter: Request to
    # register a callback.
    # @return [CallbackRegistrationResult] response from the API call
    def register_callback(account,
                          body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/callbacks/{account}',
                                     Server::DEVICE_LOCATION)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .header_param(new_parameter('*/*', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CallbackRegistrationResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                DeviceLocationResultException))
        .execute
    end

    # Deregister a URL to stop receiving callback messages.
    # @param [String] account Required parameter: Account number.
    # @param [CallbackServiceNameEnum] service Required parameter: Callback
    # service name.
    # @return [DeviceLocationSuccessResult] response from the API call
    def deregister_callback(account,
                            service)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/callbacks/{account}/name/{service}',
                                     Server::DEVICE_LOCATION)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .template_param(new_parameter(service, key: 'service')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceLocationSuccessResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                DeviceLocationResultException))
        .execute
    end
  end
end
