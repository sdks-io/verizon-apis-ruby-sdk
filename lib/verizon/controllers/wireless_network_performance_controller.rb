# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # WirelessNetworkPerformanceController
  class WirelessNetworkPerformanceController < BaseController
    # WNP Query for current network condition.
    # @param [GetNetworkConditionsRequest] body Required parameter: Request for
    # current network health.
    # @return [WNPRequestResponse] response from the API call
    def near_real_time_network_conditions(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/intelligence/network-conditions',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(WNPRequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                WNPRestErrorResponseException))
        .execute
    end

    # Run a report to determine network types available and available coverage.
    # Network types covered include: CAT-M, NB-IOT, LTE, LTE-AWS and 5GNW.
    # @param [GetWirelessCoverageRequest] body Required parameter: Request for
    # network coverage details.
    # @return [WNPRequestResponse] response from the API call
    def domestic4g_and_5g_nationwide_network_coverage(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/intelligence/wireless-coverage',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(WNPRequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                WNPRestErrorResponseException))
        .execute
    end

    # Identify the direction and general distance of nearby cell sites and the
    # technology supported by the equipment.
    # @param [GetNetworkConditionsRequest] body Required parameter: Request for
    # cell site proximity.
    # @return [WNPRequestResponse] response from the API call
    def site_proximity(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/intelligence/site-proximity/action/list',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(WNPRequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                WNPRestErrorResponseException))
        .execute
    end

    # A report of a specific device's service scores over a 30 day period.
    # @param [GetDeviceExperienceScoreHistoryRequest] body Required parameter:
    # Request for a device's 30 day experience.
    # @return [WNPRequestResponse] response from the API call
    def device_experience30days_history(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/intelligence/device-experience/history/30-days',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(WNPRequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                WNPRestErrorResponseException))
        .execute
    end

    # Run a report to view the latest device experience score for specific
    # devices.
    # @param [GetDeviceExperienceScoreBulkRequest] body Required parameter:
    # Request for bulk latest history details.
    # @return [WNPRequestResponse] response from the API call
    def device_experience_bulk_latest(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/intelligence/device-experience/bulk/latest',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(WNPRequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('default',
                                'Error response',
                                WNPRestErrorResponseException))
        .execute
    end
  end
end
