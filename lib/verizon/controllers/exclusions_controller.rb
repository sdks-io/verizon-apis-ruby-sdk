# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # ExclusionsController
  class ExclusionsController < BaseController
    # This consents endpoint sets a new exclusion list.
    # @param [ConsentRequest] body Required parameter: Request to update account
    # consent exclusion list.
    # @return [DeviceLocationSuccessResult] response from the API call
    def exclude_devices(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/consents',
                                     Server::DEVICE_LOCATION)
                   .header_param(new_parameter('*/*', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceLocationSuccessResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                DeviceLocationResultException))
        .execute
    end

    # Removes devices from the exclusion list so that they can be located with
    # Device Location Services requests.
    # @param [String] account_name Required parameter: The numeric name of the
    # account.
    # @param [String] device_list Required parameter: A list of the device IDs
    # to remove from the exclusion list.
    # @return [DeviceLocationSuccessResult] response from the API call
    def remove_devices_from_exclusion_list(account_name,
                                           device_list)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/consents',
                                     Server::DEVICE_LOCATION)
                   .query_param(new_parameter(account_name, key: 'accountName'))
                   .query_param(new_parameter(device_list, key: 'deviceList'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceLocationSuccessResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                DeviceLocationResultException))
        .execute
    end

    # This consents endpoint retrieves a list of excluded devices in an account.
    # @param [String] account Required parameter: Account identifier in
    # "##########-#####".
    # @param [String] start_index Required parameter: Zero-based number of the
    # first record to return.
    # @return [DevicesConsentResult] response from the API call
    def list_excluded_devices(account,
                              start_index)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/consents/{account}/index/{startIndex}',
                                     Server::DEVICE_LOCATION)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .template_param(new_parameter(start_index, key: 'startIndex')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DevicesConsentResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                DeviceLocationResultException))
        .execute
    end
  end
end
