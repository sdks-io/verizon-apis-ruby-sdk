# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DevicesLocationSubscriptionsController
  class DevicesLocationSubscriptionsController < BaseController
    # This subscriptions endpoint retrieves an account's current location
    # subscription status.
    # @param [String] account Required parameter: Account identifier in
    # "##########-#####".
    # @return [DeviceLocationSubscription] response from the API call
    def get_location_service_subscription_status(account)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/subscriptions/{account}',
                                     Server::DEVICE_LOCATION)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceLocationSubscription.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                DeviceLocationResultException))
        .execute
    end

    # This endpoint allows user to search for billable usage for accounts based
    # on the provided date range.
    # @param [BillUsageRequest] body Required parameter: Request to obtain
    # billable usage for accounts.
    # @return [Object] response from the API call
    def get_location_service_usage(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/usage',
                                     Server::DEVICE_LOCATION)
                   .header_param(new_parameter('*/*', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:json_deserialize))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                DeviceLocationResultException))
        .execute
    end
  end
end
