# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SoftwareManagementLicensesV1Controller
  class SoftwareManagementLicensesV1Controller < BaseController
    # Assigns licenses to a specified list of devices so that firmware upgrades
    # can be scheduled for those devices.
    # @param [String] account Required parameter: Account identifier in
    # "##########-#####".
    # @param [V1LicensesAssignedRemovedRequest] body Required parameter: IMEIs
    # of the devices to assign licenses to.
    # @return [V1LicensesAssignedRemovedResult] response from the API call
    def assign_licenses_to_devices(account,
                                   body)
      warn 'Endpoint assign_licenses_to_devices in SoftwareManagementLicensesV'\
           '1Controller is deprecated'
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/licenses/{account}/assign',
                                     Server::SOFTWARE_MANAGEMENT_V1)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(V1LicensesAssignedRemovedResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV1ResultException))
        .execute
    end

    # Remove unused licenses from device.
    # @param [String] account Required parameter: Account identifier in
    # "##########-#####".
    # @param [V1LicensesAssignedRemovedRequest] body Required parameter: IMEIs
    # of the devices to remove licenses from.
    # @return [V1LicensesAssignedRemovedResult] response from the API call
    def remove_licenses_from_devices(account,
                                     body)
      warn 'Endpoint remove_licenses_from_devices in SoftwareManagementLicense'\
           'sV1Controller is deprecated'
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/licenses/{account}/remove',
                                     Server::SOFTWARE_MANAGEMENT_V1)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(V1LicensesAssignedRemovedResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV1ResultException))
        .execute
    end

    # Creates a list of devices from which licenses will be removed if the
    # number of MRC licenses becomes less than the number of assigned licenses.
    # @param [String] account Required parameter: Account identifier in
    # "##########-#####".
    # @param [V1ListOfLicensesToRemoveRequest] body Required parameter:
    # Cancellation candidate device list.
    # @return [V1ListOfLicensesToRemoveResult] response from the API call
    def create_list_of_licenses_to_remove(account,
                                          body)
      warn 'Endpoint create_list_of_licenses_to_remove in SoftwareManagementLi'\
           'censesV1Controller is deprecated'
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/licenses/{account}/cancel',
                                     Server::SOFTWARE_MANAGEMENT_V1)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(V1ListOfLicensesToRemoveResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV1ResultException))
        .execute
    end

    # Deletes the entire list of cancellation candidate devices.
    # @param [String] account Required parameter: Account identifier in
    # "##########-#####".
    # @return [FotaV1SuccessResult] response from the API call
    def delete_list_of_licenses_to_remove(account)
      warn 'Endpoint delete_list_of_licenses_to_remove in SoftwareManagementLi'\
           'censesV1Controller is deprecated'
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/licenses/{account}/cancel',
                                     Server::SOFTWARE_MANAGEMENT_V1)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(FotaV1SuccessResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV1ResultException))
        .execute
    end

    # Returns a list of devices from which licenses will be removed if the
    # number of MRC licenses becomes less than the number of assigned licenses.
    # @param [String] account Required parameter: Account identifier in
    # "##########-#####".
    # @param [String] start_index Required parameter: The zero-based number of
    # the first record to return. Set startIndex=0 for the first request. If
    # there are more than 1,000 devices in the response, set startIndex=1000 for
    # the second request, 2000 for the third request, etc.
    # @return [V1ListOfLicensesToRemove] response from the API call
    def list_licenses_to_remove(account,
                                start_index)
      warn 'Endpoint list_licenses_to_remove in SoftwareManagementLicensesV1Co'\
           'ntroller is deprecated'
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/licenses/{account}/cancel/index/{startIndex}',
                                     Server::SOFTWARE_MANAGEMENT_V1)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .template_param(new_parameter(start_index, key: 'startIndex')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(V1ListOfLicensesToRemove.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV1ResultException))
        .execute
    end
  end
end
