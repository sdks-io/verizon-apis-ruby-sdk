# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DeviceManagementController
  class DeviceManagementController < BaseController
    # If the devices do not already exist in the account, this API resource adds
    # them before activation.
    # @param [CarrierActivateRequest] body Required parameter: Request for
    # activating a service on devices.
    # @return [DeviceManagementResult] response from the API call
    def activate_service_for_devices(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/activate',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Use this API if you want to manage some device settings before you are
    # ready to activate service for the devices.
    # @param [AddDevicesRequest] body Required parameter: Devices to add.
    # @return [Array[AddDevicesResult]] response from the API call
    def add_devices(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/add',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AddDevicesResult.method(:from_hash))
                   .is_api_response(true)
                   .is_response_array(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Sends a CarrierService callback message for each device in the request
    # when the contact information has been changed, or if there was a problem
    # and the change could not be completed.
    # @param [ContactInfoUpdateRequest] body Required parameter: Request to
    # update contact information for devices.
    # @return [DeviceManagementResult] response from the API call
    def update_devices_contact_information(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/devices/actions/contactinfo',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Sends a CarrierService callback message for each device in the request
    # when the custom fields have been changed, or if there was a problem and
    # the change could not be completed.
    # @param [CustomFieldsUpdateRequest] body Required parameter: Request to
    # update custom field of devices.
    # @return [DeviceManagementResult] response from the API call
    def update_devices_custom_fields(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/devices/actions/customFields',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Deactivating service for a device may result in an early termination fee
    # (ETF) being charged to the account, depending on the terms of the contract
    # with Verizon. If your contract allows ETF waivers and if you want to use
    # one for a particular deactivation, set the etfWaiver value to True.
    # @param [CarrierDeactivateRequest] body Required parameter: Request to
    # deactivate service for one or more devices.
    # @return [DeviceManagementResult] response from the API call
    def deactivate_service_for_devices(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/deactivate',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Use this API to remove unneeded devices from an account.
    # @param [DeleteDevicesRequest] body Required parameter: Devices to
    # delete.
    # @return [Array[DeleteDevicesResult]] response from the API call
    def delete_deactivated_devices(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/delete',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeleteDevicesResult.method(:from_hash))
                   .is_api_response(true)
                   .is_response_array(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Returns information about a single device or information about all devices
    # that match the given parameters. Returned information includes device
    # provisioning state, service plan, MDN, MIN, and IP address.
    # @param [AccountDeviceListRequest] body Required parameter: Device
    # information query.
    # @return [AccountDeviceListResult] response from the API call
    def list_devices_information(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/list',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AccountDeviceListResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Returns a list of all 4G devices with an ICCID (SIM) that was not
    # activated with the expected IMEI (hardware) during a specified time frame.
    # @param [DeviceMismatchListRequest] body Required parameter: Request to
    # list devices with mismatched IMEIs and ICCIDs.
    # @return [DeviceMismatchListResult] response from the API call
    def list_devices_with_imei_iccid_mismatch(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/list/imeiiccidmismatch',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceMismatchListResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Move active devices from one billing account to another within a customer
    # profile.
    # @param [MoveDeviceRequest] body Required parameter: Request to move
    # devices between accounts.
    # @return [DeviceManagementResult] response from the API call
    def move_devices_within_accounts_of_profile(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/devices/actions/move',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Changes the provisioning state of one or more devices to a specified
    # customer-defined service and state.
    # @param [GoToStateRequest] body Required parameter: Request to change
    # device state to one defined by the user.
    # @return [DeviceManagementResult] response from the API call
    def update_devices_state(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/devices/actions/gotostate',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Changes the service plan for one or more devices.
    # @param [ServicePlanUpdateRequest] body Required parameter: Request to
    # change device service plan.
    # @return [DeviceManagementResult] response from the API call
    def change_devices_service_plan(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/devices/actions/plan',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Suspends service for one or more devices.
    # @param [CarrierActionsRequest] body Required parameter: Request to suspend
    # service for one or more devices.
    # @return [DeviceManagementResult] response from the API call
    def suspend_service_for_devices(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/suspend',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Restores service to one or more suspended devices.
    # @param [CarrierActionsRequest] body Required parameter: Request to restore
    # services of one or more suspended devices.
    # @return [DeviceManagementResult] response from the API call
    def restore_service_for_suspended_devices(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/restore',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Checks whether specified devices are registered by the manufacturer with
    # the Verizon network and are available to be activated.
    # @param [DeviceActivationRequest] body Required parameter: Request to check
    # if devices can be activated or not.
    # @return [DeviceManagementResult] response from the API call
    def check_devices_availability_for_activation(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/availability/actions/list',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Each response includes a maximum of 500 records. To obtain more records,
    # you can call the API multiple times, adjusting the earliest value each
    # time to start where the previous request finished.
    # @param [DeviceConnectionListRequest] body Required parameter: Query to
    # retrieve device connection history.
    # @return [ConnectionHistoryResult] response from the API call
    def retrieve_device_connection_history(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/connections/actions/listHistory',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ConnectionHistoryResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Changes or removes the CostCenterCode value or customer name and address
    # (Primary Place of Use) for one or more devices.
    # @param [DeviceCostCenterRequest] body Required parameter: Request to
    # update cost center code value for one or more devices.
    # @return [DeviceManagementResult] response from the API call
    def update_devices_cost_center_code(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/devices/costCenter',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Returns extended diagnostic information about a specified device,
    # including connectivity, provisioning, billing and location status.
    # @param [DeviceExtendedDiagnosticsRequest] body Required parameter: Request
    # to query extended diagnostics information for a device.
    # @return [DeviceExtendedDiagnosticsResult] response from the API call
    def get_device_extended_diagnostic_information(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/extendeddiagnostics/actions/list',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceExtendedDiagnosticsResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Returns the provisioning history of a specified device during a specified
    # time period.
    # @param [DeviceProvisioningHistoryListRequest] body Required parameter:
    # Query to obtain device provisioning history.
    # @return [Array[DeviceProvisioningHistoryListResult]] response from the API call
    def list_devices_provisioning_history(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/history/actions/list',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceProvisioningHistoryListResult.method(:from_hash))
                   .is_api_response(true)
                   .is_response_array(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # 4G and GSM devices do not have a PRL.
    # @param [DevicePrlListRequest] body Required parameter: Request to query
    # device PRL.
    # @return [DeviceManagementResult] response from the API call
    def list_current_devices_prl_version(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/prl/actions/list',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Returns DeviceSuspensionStatus callback messages containing the current
    # device state and information on how many days a device has been suspended
    # and can continue to be suspended.
    # @param [DeviceSuspensionStatusRequest] body Required parameter: Request to
    # obtain service suspenstion status for a device.
    # @return [DeviceManagementResult] response from the API call
    def get_device_service_suspension_status(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/suspension/status',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Returns the network data usage history of a device during a specified time
    # period.
    # @param [DeviceUsageListRequest] body Required parameter: Request to obtain
    # usage history for a specific device.
    # @return [DeviceUsageListResult] response from the API call
    def list_devices_usage_history(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/usage/actions/list',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceUsageListResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # The information is returned in a callback response, so you must register a
    # URL for DeviceUsage callback messages using the POST /callbacks API.
    # @param [DeviceAggregateUsageListRequest] body Required parameter: A
    # request to retrieve aggregated device usage history information.
    # @return [DeviceManagementResult] response from the API call
    def retrieve_aggregate_device_usage_history(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/usage/actions/list/aggregate',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Changes the identifier of a 3G or 4G device to match hardware changes made
    # for a line of service. Use this request to transfer the line of service
    # and the MDN to new hardware, or to change the MDN.
    # @param [String] service_type Required parameter: Identifier type.
    # @param [ChangeDeviceIdRequest] body Required parameter: Request to update
    # device id.
    # @return [DeviceManagementResult] response from the API call
    def update_device_id(service_type,
                         body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/devices/{serviceType}/actions/deviceId',
                                     Server::M2M)
                   .template_param(new_parameter(service_type, key: 'serviceType')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # This corresponds to the M2M-MC SOAP interface, ```DeviceUploadService```.
    # @param [DeviceUploadRequest] body Required parameter: Device Upload
    # Query
    # @return [RequestResponse] response from the API call
    def device_upload(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/upload',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(RequestResponse.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error Response',
                                RestErrorResponseException))
        .execute
    end

    # Gets billed usage for for either multiple devices or an entire billing
    # account.
    # @param [BilledusageListRequest] body Required parameter: Request to list
    # devices with mismatched IMEIs and ICCIDs.
    # @return [DeviceManagementResult] response from the API call
    def billed_usage_info(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/usage/actions/billedusage/list',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Allows you to associate your own usage segmentation label with a device.
    # @param [AssociateLabelRequest] body Required parameter: Request to
    # associate a label to a device.
    # @return [DeviceManagementResult] response from the API call
    def usage_segmentation_label_association(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/usagesegmentationlabels',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Allow customers to remove the associated label from a device.
    # @param [String] account_name Required parameter: The numeric name of the
    # account.
    # @param [LabelsList] label_list Required parameter: A list of the Label IDs
    # to remove from the exclusion list.
    # @return [DeviceManagementResult] response from the API call
    def usage_segmentation_label_deletion(account_name,
                                          label_list)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/v1/devices/actions/usagesegmentationlabels',
                                     Server::M2M)
                   .query_param(new_parameter(account_name, key: 'accountName'))
                   .query_param(new_parameter(label_list, key: 'LabelList'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Uploads and activates device identifiers and SKUs for new devices from
    # OEMs to Verizon.
    # @param [UploadsActivatesDeviceRequest] body Required parameter: Request to
    # Uploads and activates device.
    # @return [DeviceManagementResult] response from the API call
    def activation_order_status(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/actions/uploadactivate',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end

    # Checks the status of an activation order and lists where the order is in
    # the provisioning process.
    # @param [CheckOrderStatusRequest] body Required parameter: The request body
    # identifies the device and reporting period that you want included in the
    # report.
    # @return [DeviceManagementResult] response from the API call
    def upload_device_identifier(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/devices/requests/status',
                                     Server::M2M)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Error response.',
                                ConnectivityManagementResultException))
        .execute
    end
  end
end
