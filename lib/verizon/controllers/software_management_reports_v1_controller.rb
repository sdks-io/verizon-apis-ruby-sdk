# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SoftwareManagementReportsV1Controller
  class SoftwareManagementReportsV1Controller < BaseController
    # Returns an array of all devices in the specified account. Each device
    # object includes information needed for managing firmware, including the
    # device make and model, MDN and IMEI, and current firmware version.
    # @param [String] account Required parameter: Account identifier in
    # "##########-#####".
    # @param [String] start_index Required parameter: Only return devices with
    # IMEIs larger than this value. Use 0 for the first request. If
    # `hasMoreData`=true in the response, use the `lastSeenDeviceId` value from
    # the response as the startIndex in the next request.
    # @return [DeviceListQueryResult] response from the API call
    def list_account_devices(account,
                             start_index)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/devices/{account}/index/{startIndex}',
                                     Server::SOFTWARE_MANAGEMENT_V1)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .template_param(new_parameter(start_index, key: 'startIndex')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceListQueryResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV1ResultException))
        .execute
    end

    # Returns a list of all upgrades with a specified status.
    # @param [String] account Required parameter: Account identifier in
    # "##########-#####".
    # @param [UpgradeStatusEnum] upgrade_status Required parameter: The status
    # of the upgrades that you want to retrieve.
    # @param [String] start_index Required parameter: The zero-based number of
    # the first record to return. Set startIndex=0 for the first request. If
    # `hasMoreFlag`=true in the response, use the `lastSeenUpgradeId` value from
    # the response as the startIndex in the next request.
    # @return [UpgradeListQueryResult] response from the API call
    def list_upgrades_for_specified_status(account,
                                           upgrade_status,
                                           start_index)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/reports/{account}/status/{upgradeStatus}/index/{startIndex}',
                                     Server::SOFTWARE_MANAGEMENT_V1)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .template_param(new_parameter(upgrade_status, key: 'upgradeStatus')
                                    .should_encode(true))
                   .template_param(new_parameter(start_index, key: 'startIndex')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UpgradeListQueryResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV1ResultException))
        .execute
    end

    # Returns the upgrade history of the specified device from the previous six
    # months.
    # @param [String] account Required parameter: Account identifier in
    # "##########-#####".
    # @param [String] device_id Required parameter: The IMEI of the device.
    # @return [Array[DeviceUpgradeHistory]] response from the API call
    def get_device_firmware_upgrade_history(account,
                                            device_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/reports/{account}/devices/{deviceId}',
                                     Server::SOFTWARE_MANAGEMENT_V1)
                   .template_param(new_parameter(account, key: 'account')
                                    .should_encode(true))
                   .template_param(new_parameter(device_id, key: 'deviceId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeviceUpgradeHistory.method(:from_hash))
                   .is_api_response(true)
                   .is_response_array(true)
                   .local_error('400',
                                'Unexpected error.',
                                FotaV1ResultException))
        .execute
    end
  end
end
