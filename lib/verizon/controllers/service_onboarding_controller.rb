# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # ServiceOnboardingController
  class ServiceOnboardingController < BaseController
    # Upload workload payload/package in the MEC platform.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_name Required parameter: Service name to which the
    # file is going to be associated.
    # @param [String] version Required parameter: Version of the service being
    # used.
    # @param [CategoryTypeEnum] category_type Required parameter: Type of the
    # file being uploaded.
    # @param [String] category_name Required parameter: `workloadName` used in
    # the service while creation.
    # @param [File | UploadIO] payload Required parameter: Payload/file which is
    # to be uploaded should be provided in formData.
    # @param [String] correlation_id Optional parameter: Example:
    # @param [String] category_version Optional parameter: It is mandatory for
    # only service file, not mandatory for workload and workflow file.
    # @return [ServiceFile] response from the API call
    def upload_service_workload_file(account_name,
                                     service_name,
                                     version,
                                     category_type,
                                     category_name,
                                     payload,
                                     correlation_id: nil,
                                     category_version: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/files/{serviceName}/{version}/uploadAndValidate',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_name, key: 'serviceName')
                                    .should_encode(true))
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .query_param(new_parameter(category_type, key: 'categoryType'))
                   .query_param(new_parameter(category_name, key: 'categoryName'))
                   .multipart_param(new_parameter(payload, key: 'payload')
                                     .default_content_type('application/octet-stream'))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .query_param(new_parameter(category_version, key: 'categoryVersion'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceFile.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Fetch all organizational services in the platform.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] correlation_id Optional parameter: Example:
    # @param [String] name Optional parameter: Name of the service whose
    # information needs to be fetched.
    # @param [String] q Optional parameter: Use the comma (:) character to
    # separate multiple values eg
    # type=myService:workloads.packageType=Helm,YAML:state=DRAFTED,VALIDATION_CO
    # MPLETED.
    # @param [Integer] limit Optional parameter: Number of items to return.
    # @param [Integer] off_set Optional parameter: Id of the last respose value
    # in the previous list.
    # @param [String] sort_key Optional parameter: Sorts the response by an
    # attribute. Default is createdDate.
    # @param [SortDirectionEnum] sort_dir Optional parameter: Sorts the
    # response. Use asc for ascending or desc for descending order. The default
    # is desc.
    # @param [TrueClass | FalseClass] details_flag Optional parameter: Default
    # as true. If it is true, then it will return all details.
    # @return [Services] response from the API call
    def list_services(account_name,
                      correlation_id: nil,
                      name: nil,
                      q: nil,
                      limit: nil,
                      off_set: nil,
                      sort_key: 'createdDate',
                      sort_dir: nil,
                      details_flag: true)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/v1/services',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .query_param(new_parameter(name, key: 'name'))
                   .query_param(new_parameter(q, key: 'q'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .query_param(new_parameter(off_set, key: 'offSet'))
                   .query_param(new_parameter(sort_key, key: 'sortKey'))
                   .query_param(new_parameter(sort_dir, key: 'sortDir'))
                   .query_param(new_parameter(details_flag, key: 'detailsFlag'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Services.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not Found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Create a new service within user's organization.
    # @param [String] account_name Required parameter: User account name.
    # @param [Service] body Required parameter: Example:
    # @param [String] correlation_id Optional parameter: Example:
    # @return [Service] response from the API call
    def register_service(account_name,
                         body,
                         correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v1/services',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Service.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('403',
                                'Forbidden.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('415',
                                'Unsupported media type.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('429',
                                'Too many requests.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Fetch a service details within user's organization using service name and
    # version.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_name Required parameter: Name of the service whose
    # information needs to be fetched.
    # @param [String] version Required parameter: Version of service whose
    # information needs to be fetched.
    # @param [String] correlation_id Optional parameter: Example:
    # @return [Service] response from the API call
    def list_service_details(account_name,
                             service_name,
                             version,
                             correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/v1/services/{serviceName}/{version}',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_name, key: 'serviceName')
                                    .should_encode(true))
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Service.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not Found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('default',
                                'Unexpected error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Remove a service from user's organization.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_name Required parameter: Name of the service which
    # is about to be deleted.
    # @param [String] version Required parameter: Version of the service which
    # is about to be deleted.
    # @param [String] correlation_id Optional parameter: Example:
    # @return [EdgeServiceOnboardingDeleteResult] response from the API call
    def remove_service(account_name,
                       service_name,
                       version,
                       correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/v1/services/{serviceName}/{version}',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_name, key: 'serviceName')
                                    .should_encode(true))
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(EdgeServiceOnboardingDeleteResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Start service onboarding process to kick off service artifact validation
    # and making the service ready for sandbox testing. On successful completion
    # of this process system will generate claims for each selected cloud
    # provider using which user can start sandbox testing.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_name Required parameter: Name of the service which
    # is to be onboarded.
    # @param [String] version Required parameter: Version of service which is to
    # be onboarded.
    # @param [String] correlation_id Optional parameter: Example:
    # @return [ServiceManagementResult] response from the API call
    def start_service_onboarding(account_name,
                                 service_name,
                                 version,
                                 correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/services/{serviceName}/{version}/startOnboarding',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_name, key: 'serviceName')
                                    .should_encode(true))
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('403',
                                'Forbidden.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('415',
                                'Unsupported media type.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('429',
                                'Too many requests.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Check current status of job for a service using job ID.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] job_id Required parameter: Auto-generated Id of the job.
    # @param [String] correlation_id Optional parameter: Example:
    # @return [CurrentStatus] response from the API call
    def get_service_job_status(account_name,
                               job_id,
                               correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/v1/services/{jobId}/status',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(job_id, key: 'jobId')
                                    .should_encode(true))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CurrentStatus.method(:from_hash))
                   .is_api_response(true)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('404',
                                'Not found.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Initiate testing of a service in sandbox environment per claim based on
    # service's compatibility(s).
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_id Required parameter: An id of the service
    # created e.g. UUID.
    # @param [String] claim_id Required parameter: Id of the claim created e.g.
    # UUID.
    # @param [ClusterInfoDetails] body Required parameter: Example:
    # @param [String] correlation_id Optional parameter: Example:
    # @return [ServiceManagementResult] response from the API call
    def start_service_claim_sand_box_testing(account_name,
                                             service_id,
                                             claim_id,
                                             body,
                                             correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/services/{serviceId}/claims/{claimId}/sandBoxStart',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_id, key: 'serviceId')
                                    .should_encode(true))
                   .template_param(new_parameter(claim_id, key: 'claimId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('default',
                                'Unexpected error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Start publishing a service. On successful completion, service's status can
    # be marked as Publish.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_name Required parameter: Name of the service e.g.
    # any sub string of serviceName.
    # @param [String] version Required parameter: Version of service which is to
    # be published.
    # @param [String] correlation_id Optional parameter: Example:
    # @return [ServiceManagementResult] response from the API call
    def start_service_publishing(account_name,
                                 service_name,
                                 version,
                                 correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/services/{serviceName}/{version}/publish',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_name, key: 'serviceName')
                                    .should_encode(true))
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('default',
                                'Unexpected error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Start service certification process. On successful completion of this
    # process, service's status will change to certified.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_name Required parameter: Name of the service e.g.
    # any sub string of serviceName.
    # @param [String] version Required parameter: Version of service which is to
    # be certified.
    # @param [String] correlation_id Optional parameter: Example:
    # @return [ServiceManagementResult] response from the API call
    def stop_service_testing(account_name,
                             service_name,
                             version,
                             correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/services/{serviceName}/{version}/certify',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_name, key: 'serviceName')
                                    .should_encode(true))
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('default',
                                'Unexpected error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end

    # Start the process to change a service's status to "Ready to Use". On
    # success, service's status will be changed to "Ready to Use". Only a ready
    # to use service can be deployed in production environment.
    # @param [String] account_name Required parameter: User account name.
    # @param [String] service_name Required parameter: Name of the service e.g.
    # any sub string of serviceName.
    # @param [String] version Required parameter: Version of the service which
    # is already certified and is ready for public use.
    # @param [String] correlation_id Optional parameter: Example:
    # @return [ServiceManagementResult] response from the API call
    def mark_service_as_ready_for_public_use(account_name,
                                             service_name,
                                             version,
                                             correlation_id: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/v1/services/{serviceName}/{version}/readyToPublicUse',
                                     Server::SERVICES)
                   .header_param(new_parameter(account_name, key: 'AccountName'))
                   .template_param(new_parameter(service_name, key: 'serviceName')
                                    .should_encode(true))
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(correlation_id, key: 'correlationId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ServiceManagementResult.method(:from_hash))
                   .is_api_response(true)
                   .local_error('400',
                                'Bad Request.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('401',
                                'Unauthorized.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('500',
                                'Internal Server Error.',
                                EdgeServiceOnboardingResultErrorException)
                   .local_error('default',
                                'Unexpected error.',
                                EdgeServiceOnboardingResultErrorException))
        .execute
    end
  end
end
