# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Summary of license assignment.
  class V2LicenseSummary < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Account identifier.
    # @return [String]
    attr_accessor :account_name

    # Total FOTA license count.
    # @return [Integer]
    attr_accessor :total_license

    # Assigned FOTA license count.
    # @return [Integer]
    attr_accessor :assigned_licenses

    # True if there are more devices to retrieve.
    # @return [TrueClass | FalseClass]
    attr_accessor :has_more_data

    # Last seen device identifier.
    # @return [String]
    attr_accessor :last_seen_device_id

    # Maximum page size.
    # @return [Integer]
    attr_accessor :max_page_size

    # Device IMEI list.
    # @return [Array[V2LicenseDevice]]
    attr_accessor :device_list

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['total_license'] = 'totalLicense'
      @_hash['assigned_licenses'] = 'assignedLicenses'
      @_hash['has_more_data'] = 'hasMoreData'
      @_hash['last_seen_device_id'] = 'lastSeenDeviceId'
      @_hash['max_page_size'] = 'maxPageSize'
      @_hash['device_list'] = 'deviceList'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        total_license
        last_seen_device_id
        device_list
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name = nil,
                   assigned_licenses = nil,
                   has_more_data = nil,
                   max_page_size = nil,
                   total_license = SKIP,
                   last_seen_device_id = SKIP,
                   device_list = SKIP)
      @account_name = account_name
      @total_license = total_license unless total_license == SKIP
      @assigned_licenses = assigned_licenses
      @has_more_data = has_more_data
      @last_seen_device_id = last_seen_device_id unless last_seen_device_id == SKIP
      @max_page_size = max_page_size
      @device_list = device_list unless device_list == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : nil
      assigned_licenses =
        hash.key?('assignedLicenses') ? hash['assignedLicenses'] : nil
      has_more_data = hash.key?('hasMoreData') ? hash['hasMoreData'] : nil
      max_page_size = hash.key?('maxPageSize') ? hash['maxPageSize'] : nil
      total_license = hash.key?('totalLicense') ? hash['totalLicense'] : SKIP
      last_seen_device_id =
        hash.key?('lastSeenDeviceId') ? hash['lastSeenDeviceId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      device_list = nil
      unless hash['deviceList'].nil?
        device_list = []
        hash['deviceList'].each do |structure|
          device_list << (V2LicenseDevice.from_hash(structure) if structure)
        end
      end

      device_list = SKIP unless hash.key?('deviceList')

      # Create object from extracted values.
      V2LicenseSummary.new(account_name,
                           assigned_licenses,
                           has_more_data,
                           max_page_size,
                           total_license,
                           last_seen_device_id,
                           device_list)
    end
  end
end
