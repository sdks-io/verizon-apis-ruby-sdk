# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Cloud Model.
  class Cloud < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Cloud provider where you plan to provision and operate your Kubernetes
    # cluster.
    # @return [CloudProviderEnum]
    attr_accessor :provider

    # Supported Kubernetes distribution for the selected cloud provider.
    # @return [CloudDestributionEnum]
    attr_accessor :distribution

    # Supported Kubernetes distribution for the selected cloud provider.
    # @return [CommonConfiguration]
    attr_accessor :common_config

    # Supported Kubernetes distribution for the selected cloud provider.
    # @return [ClusterConfiguration]
    attr_accessor :cluster_config

    # Supported Kubernetes distribution for the selected cloud provider.
    # @return [NodeConfiguration]
    attr_accessor :node_config

    # Supported Kubernetes distribution for the selected cloud provider.
    # @return [Array[NodeConfiguration]]
    attr_accessor :node_configs

    # Supported Kubernetes distribution for the selected cloud provider.
    # @return [AdvanceConfiguration]
    attr_accessor :advance_config

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['provider'] = 'provider'
      @_hash['distribution'] = 'distribution'
      @_hash['common_config'] = 'commonConfig'
      @_hash['cluster_config'] = 'clusterConfig'
      @_hash['node_config'] = 'nodeConfig'
      @_hash['node_configs'] = 'nodeConfigs'
      @_hash['advance_config'] = 'advanceConfig'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        provider
        distribution
        common_config
        cluster_config
        node_config
        node_configs
        advance_config
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(provider = SKIP,
                   distribution = SKIP,
                   common_config = SKIP,
                   cluster_config = SKIP,
                   node_config = SKIP,
                   node_configs = SKIP,
                   advance_config = SKIP)
      @provider = provider unless provider == SKIP
      @distribution = distribution unless distribution == SKIP
      @common_config = common_config unless common_config == SKIP
      @cluster_config = cluster_config unless cluster_config == SKIP
      @node_config = node_config unless node_config == SKIP
      @node_configs = node_configs unless node_configs == SKIP
      @advance_config = advance_config unless advance_config == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      provider = hash.key?('provider') ? hash['provider'] : SKIP
      distribution = hash.key?('distribution') ? hash['distribution'] : SKIP
      common_config = CommonConfiguration.from_hash(hash['commonConfig']) if hash['commonConfig']
      cluster_config = ClusterConfiguration.from_hash(hash['clusterConfig']) if
        hash['clusterConfig']
      node_config = NodeConfiguration.from_hash(hash['nodeConfig']) if hash['nodeConfig']
      # Parameter is an array, so we need to iterate through it
      node_configs = nil
      unless hash['nodeConfigs'].nil?
        node_configs = []
        hash['nodeConfigs'].each do |structure|
          node_configs << (NodeConfiguration.from_hash(structure) if structure)
        end
      end

      node_configs = SKIP unless hash.key?('nodeConfigs')
      advance_config = AdvanceConfiguration.from_hash(hash['advanceConfig']) if
        hash['advanceConfig']

      # Create object from extracted values.
      Cloud.new(provider,
                distribution,
                common_config,
                cluster_config,
                node_config,
                node_configs,
                advance_config)
    end
  end
end
