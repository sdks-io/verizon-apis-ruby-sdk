# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # Device status.
  class V3DeviceStatus < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Device IMEI.
    # @return [String]
    attr_accessor :device_id

    # Success or failure.
    # @return [String]
    attr_accessor :status

    # Result reason.
    # @return [String]
    attr_accessor :result_reason

    # Updated Time.
    # @return [DateTime]
    attr_accessor :updated_time

    # The most recent attempt time.
    # @return [DateTime]
    attr_accessor :recent_attempt_time

    # Next attempt time.
    # @return [DateTime]
    attr_accessor :next_attempt_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'deviceId'
      @_hash['status'] = 'status'
      @_hash['result_reason'] = 'resultReason'
      @_hash['updated_time'] = 'updatedTime'
      @_hash['recent_attempt_time'] = 'recentAttemptTime'
      @_hash['next_attempt_time'] = 'nextAttemptTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        result_reason
        updated_time
        recent_attempt_time
        next_attempt_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id = nil,
                   status = nil,
                   result_reason = SKIP,
                   updated_time = SKIP,
                   recent_attempt_time = SKIP,
                   next_attempt_time = SKIP)
      @device_id = device_id
      @status = status
      @result_reason = result_reason unless result_reason == SKIP
      @updated_time = updated_time unless updated_time == SKIP
      @recent_attempt_time = recent_attempt_time unless recent_attempt_time == SKIP
      @next_attempt_time = next_attempt_time unless next_attempt_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = hash.key?('deviceId') ? hash['deviceId'] : nil
      status = hash.key?('status') ? hash['status'] : nil
      result_reason = hash.key?('resultReason') ? hash['resultReason'] : SKIP
      updated_time = if hash.key?('updatedTime')
                       (DateTimeHelper.from_rfc3339(hash['updatedTime']) if hash['updatedTime'])
                     else
                       SKIP
                     end
      recent_attempt_time = if hash.key?('recentAttemptTime')
                              (DateTimeHelper.from_rfc3339(hash['recentAttemptTime']) if hash['recentAttemptTime'])
                            else
                              SKIP
                            end
      next_attempt_time = if hash.key?('nextAttemptTime')
                            (DateTimeHelper.from_rfc3339(hash['nextAttemptTime']) if hash['nextAttemptTime'])
                          else
                            SKIP
                          end

      # Create object from extracted values.
      V3DeviceStatus.new(device_id,
                         status,
                         result_reason,
                         updated_time,
                         recent_attempt_time,
                         next_attempt_time)
    end

    def to_updated_time
      DateTimeHelper.to_rfc3339(updated_time)
    end

    def to_recent_attempt_time
      DateTimeHelper.to_rfc3339(recent_attempt_time)
    end

    def to_next_attempt_time
      DateTimeHelper.to_rfc3339(next_attempt_time)
    end
  end
end
