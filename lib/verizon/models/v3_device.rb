# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # Device information.
  class V3Device < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Device IMEI.
    # @return [String]
    attr_accessor :device_id

    # Success or failure.
    # @return [String]
    attr_accessor :request_status

    # Success or failure.
    # @return [String]
    attr_accessor :result_reason

    # MDN.
    # @return [String]
    attr_accessor :mdn

    # Device model.
    # @return [String]
    attr_accessor :model

    # Device make.
    # @return [String]
    attr_accessor :make

    # Device firmware version.
    # @return [String]
    attr_accessor :firmware

    # Value=true if the device software can be upgraded over the air using the
    # Software Management Services API.
    # @return [TrueClass | FalseClass]
    attr_accessor :fota_eligible

    # Device status.
    # @return [String]
    attr_accessor :status

    # License assigned device.
    # @return [TrueClass | FalseClass]
    attr_accessor :license_assigned

    # Firmware protocol. Valid values include: LWM2M, OMADM, HTTP or NONE.
    # @return [String]
    attr_accessor :protocol

    # List of sofware.
    # @return [Array[V3SoftwareInfo]]
    attr_accessor :software_list

    # List of files.
    # @return [Array[V3SoftwareInfo]]
    attr_accessor :file_list

    # The date and time of when the device is created.
    # @return [String]
    attr_accessor :create_time

    # The date and time of when the device firmware or software is updated.
    # @return [String]
    attr_accessor :status_time

    # The date and time of when the device is updated.
    # @return [String]
    attr_accessor :update_time

    # The date and time of when the device is refreshed.
    # @return [String]
    attr_accessor :refresh_time

    # The date and time of when the device reachability is checked.
    # @return [DateTime]
    attr_accessor :last_connection_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'deviceId'
      @_hash['request_status'] = 'requestStatus'
      @_hash['result_reason'] = 'resultReason'
      @_hash['mdn'] = 'mdn'
      @_hash['model'] = 'model'
      @_hash['make'] = 'make'
      @_hash['firmware'] = 'firmware'
      @_hash['fota_eligible'] = 'fotaEligible'
      @_hash['status'] = 'status'
      @_hash['license_assigned'] = 'licenseAssigned'
      @_hash['protocol'] = 'protocol'
      @_hash['software_list'] = 'softwareList'
      @_hash['file_list'] = 'fileList'
      @_hash['create_time'] = 'createTime'
      @_hash['status_time'] = 'statusTime'
      @_hash['update_time'] = 'updateTime'
      @_hash['refresh_time'] = 'refreshTime'
      @_hash['last_connection_time'] = 'lastConnectionTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        request_status
        result_reason
        mdn
        model
        make
        firmware
        fota_eligible
        status
        license_assigned
        protocol
        software_list
        file_list
        create_time
        status_time
        update_time
        refresh_time
        last_connection_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id = nil,
                   request_status = SKIP,
                   result_reason = SKIP,
                   mdn = SKIP,
                   model = SKIP,
                   make = SKIP,
                   firmware = SKIP,
                   fota_eligible = SKIP,
                   status = SKIP,
                   license_assigned = SKIP,
                   protocol = SKIP,
                   software_list = SKIP,
                   file_list = SKIP,
                   create_time = SKIP,
                   status_time = SKIP,
                   update_time = SKIP,
                   refresh_time = SKIP,
                   last_connection_time = SKIP)
      @device_id = device_id
      @request_status = request_status unless request_status == SKIP
      @result_reason = result_reason unless result_reason == SKIP
      @mdn = mdn unless mdn == SKIP
      @model = model unless model == SKIP
      @make = make unless make == SKIP
      @firmware = firmware unless firmware == SKIP
      @fota_eligible = fota_eligible unless fota_eligible == SKIP
      @status = status unless status == SKIP
      @license_assigned = license_assigned unless license_assigned == SKIP
      @protocol = protocol unless protocol == SKIP
      @software_list = software_list unless software_list == SKIP
      @file_list = file_list unless file_list == SKIP
      @create_time = create_time unless create_time == SKIP
      @status_time = status_time unless status_time == SKIP
      @update_time = update_time unless update_time == SKIP
      @refresh_time = refresh_time unless refresh_time == SKIP
      @last_connection_time = last_connection_time unless last_connection_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = hash.key?('deviceId') ? hash['deviceId'] : nil
      request_status = hash.key?('requestStatus') ? hash['requestStatus'] : SKIP
      result_reason = hash.key?('resultReason') ? hash['resultReason'] : SKIP
      mdn = hash.key?('mdn') ? hash['mdn'] : SKIP
      model = hash.key?('model') ? hash['model'] : SKIP
      make = hash.key?('make') ? hash['make'] : SKIP
      firmware = hash.key?('firmware') ? hash['firmware'] : SKIP
      fota_eligible = hash.key?('fotaEligible') ? hash['fotaEligible'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      license_assigned =
        hash.key?('licenseAssigned') ? hash['licenseAssigned'] : SKIP
      protocol = hash.key?('protocol') ? hash['protocol'] : SKIP
      # Parameter is an array, so we need to iterate through it
      software_list = nil
      unless hash['softwareList'].nil?
        software_list = []
        hash['softwareList'].each do |structure|
          software_list << (V3SoftwareInfo.from_hash(structure) if structure)
        end
      end

      software_list = SKIP unless hash.key?('softwareList')
      # Parameter is an array, so we need to iterate through it
      file_list = nil
      unless hash['fileList'].nil?
        file_list = []
        hash['fileList'].each do |structure|
          file_list << (V3SoftwareInfo.from_hash(structure) if structure)
        end
      end

      file_list = SKIP unless hash.key?('fileList')
      create_time = hash.key?('createTime') ? hash['createTime'] : SKIP
      status_time = hash.key?('statusTime') ? hash['statusTime'] : SKIP
      update_time = hash.key?('updateTime') ? hash['updateTime'] : SKIP
      refresh_time = hash.key?('refreshTime') ? hash['refreshTime'] : SKIP
      last_connection_time = if hash.key?('lastConnectionTime')
                               (DateTimeHelper.from_rfc3339(hash['lastConnectionTime']) if hash['lastConnectionTime'])
                             else
                               SKIP
                             end

      # Create object from extracted values.
      V3Device.new(device_id,
                   request_status,
                   result_reason,
                   mdn,
                   model,
                   make,
                   firmware,
                   fota_eligible,
                   status,
                   license_assigned,
                   protocol,
                   software_list,
                   file_list,
                   create_time,
                   status_time,
                   update_time,
                   refresh_time,
                   last_connection_time)
    end

    def to_last_connection_time
      DateTimeHelper.to_rfc3339(last_connection_time)
    end
  end
end
