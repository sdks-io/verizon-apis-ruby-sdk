# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Request to send SMS.
  class SMSSendRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name of a billing account.
    # @return [String]
    attr_accessor :account_name

    # The names and values of custom fields, if you want to only include devices
    # that have matching custom fields.
    # @return [Array[CustomFields]]
    attr_accessor :custom_fields

    # The SMS message encoding, which can be 7-bit (default), 8-bit-ASCII,
    # 8-bit-UTF-8, 8-bit-DATA.
    # @return [String]
    attr_accessor :data_encoding

    # The devices that you want to send the message to, specified by device
    # identifier.
    # @return [Array[DeviceId]]
    attr_accessor :device_ids

    # The name of a device group, if you want to send the SMS message to all
    # devices in the device group.
    # @return [String]
    attr_accessor :group_name

    # The name of a service plan, if you want to only include devices that have
    # that service plan.
    # @return [String]
    attr_accessor :service_plan

    # The contents of the SMS message. The SMS message is limited to 160
    # characters in 7-bit format, or 140 characters in 8-bit format.
    # @return [String]
    attr_accessor :sms_message

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['custom_fields'] = 'customFields'
      @_hash['data_encoding'] = 'dataEncoding'
      @_hash['device_ids'] = 'deviceIds'
      @_hash['group_name'] = 'groupName'
      @_hash['service_plan'] = 'servicePlan'
      @_hash['sms_message'] = 'smsMessage'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_name
        custom_fields
        data_encoding
        device_ids
        group_name
        service_plan
        sms_message
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name = SKIP,
                   custom_fields = SKIP,
                   data_encoding = SKIP,
                   device_ids = SKIP,
                   group_name = SKIP,
                   service_plan = SKIP,
                   sms_message = SKIP)
      @account_name = account_name unless account_name == SKIP
      @custom_fields = custom_fields unless custom_fields == SKIP
      @data_encoding = data_encoding unless data_encoding == SKIP
      @device_ids = device_ids unless device_ids == SKIP
      @group_name = group_name unless group_name == SKIP
      @service_plan = service_plan unless service_plan == SKIP
      @sms_message = sms_message unless sms_message == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP
      # Parameter is an array, so we need to iterate through it
      custom_fields = nil
      unless hash['customFields'].nil?
        custom_fields = []
        hash['customFields'].each do |structure|
          custom_fields << (CustomFields.from_hash(structure) if structure)
        end
      end

      custom_fields = SKIP unless hash.key?('customFields')
      data_encoding = hash.key?('dataEncoding') ? hash['dataEncoding'] : SKIP
      # Parameter is an array, so we need to iterate through it
      device_ids = nil
      unless hash['deviceIds'].nil?
        device_ids = []
        hash['deviceIds'].each do |structure|
          device_ids << (DeviceId.from_hash(structure) if structure)
        end
      end

      device_ids = SKIP unless hash.key?('deviceIds')
      group_name = hash.key?('groupName') ? hash['groupName'] : SKIP
      service_plan = hash.key?('servicePlan') ? hash['servicePlan'] : SKIP
      sms_message = hash.key?('smsMessage') ? hash['smsMessage'] : SKIP

      # Create object from extracted values.
      SMSSendRequest.new(account_name,
                         custom_fields,
                         data_encoding,
                         device_ids,
                         group_name,
                         service_plan,
                         sms_message)
    end
  end
end
