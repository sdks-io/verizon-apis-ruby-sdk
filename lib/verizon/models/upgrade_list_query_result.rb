# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Upgrade information.
  class UpgradeListQueryResult < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # True if there are more devices to retrieve.
    # @return [TrueClass | FalseClass]
    attr_accessor :has_more_flag

    # If hasMoreData=true, the startIndex to use for the next request. 0 if
    # hasMoreData=false.
    # @return [Integer]
    attr_accessor :last_seen_upgrade_id

    # Array of upgrade objects with the specified status.
    # @return [Array[FirmwareUpgrade]]
    attr_accessor :report_list

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['has_more_flag'] = 'hasMoreFlag'
      @_hash['last_seen_upgrade_id'] = 'lastSeenUpgradeId'
      @_hash['report_list'] = 'reportList'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        has_more_flag
        last_seen_upgrade_id
        report_list
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        report_list
      ]
    end

    def initialize(has_more_flag = SKIP,
                   last_seen_upgrade_id = SKIP,
                   report_list = SKIP)
      @has_more_flag = has_more_flag unless has_more_flag == SKIP
      @last_seen_upgrade_id = last_seen_upgrade_id unless last_seen_upgrade_id == SKIP
      @report_list = report_list unless report_list == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      has_more_flag = hash.key?('hasMoreFlag') ? hash['hasMoreFlag'] : SKIP
      last_seen_upgrade_id =
        hash.key?('lastSeenUpgradeId') ? hash['lastSeenUpgradeId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      report_list = nil
      unless hash['reportList'].nil?
        report_list = []
        hash['reportList'].each do |structure|
          report_list << (FirmwareUpgrade.from_hash(structure) if structure)
        end
      end

      report_list = SKIP unless hash.key?('reportList')

      # Create object from extracted values.
      UpgradeListQueryResult.new(has_more_flag,
                                 last_seen_upgrade_id,
                                 report_list)
    end
  end
end
