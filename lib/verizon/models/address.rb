# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The customer address for the line's primary place of use, for line usage
  # taxation.
  class Address < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The street address for the line's primary place of use. This must be a
    # physical address for taxation; it cannot be a P.O. box.
    # @return [String]
    attr_accessor :address_line1

    # Optional additional street address information.
    # @return [String]
    attr_accessor :address_line2

    # The city for the line's primary place of use.
    # @return [String]
    attr_accessor :city

    # The state for the line's primary place of use.
    # @return [String]
    attr_accessor :state

    # The ZIP code for the line's primary place of use.
    # @return [String]
    attr_accessor :zip

    # The ZIP+4 for the line's primary place of use.
    # @return [String]
    attr_accessor :zip4

    # Either “US” or “USA” for the country of the line's primary place of use.
    # @return [String]
    attr_accessor :country

    # A phone number where the customer can be reached.
    # @return [String]
    attr_accessor :phone

    # A single letter to indicate the customer phone type.
    # @return [String]
    attr_accessor :phone_type

    # An email address for the customer.
    # @return [String]
    attr_accessor :email_address

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['address_line1'] = 'addressLine1'
      @_hash['address_line2'] = 'addressLine2'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash['zip'] = 'zip'
      @_hash['zip4'] = 'zip4'
      @_hash['country'] = 'country'
      @_hash['phone'] = 'phone'
      @_hash['phone_type'] = 'phoneType'
      @_hash['email_address'] = 'emailAddress'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        address_line2
        zip4
        phone
        phone_type
        email_address
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(address_line1 = nil,
                   city = nil,
                   state = nil,
                   zip = nil,
                   country = nil,
                   address_line2 = SKIP,
                   zip4 = SKIP,
                   phone = SKIP,
                   phone_type = SKIP,
                   email_address = SKIP)
      @address_line1 = address_line1
      @address_line2 = address_line2 unless address_line2 == SKIP
      @city = city
      @state = state
      @zip = zip
      @zip4 = zip4 unless zip4 == SKIP
      @country = country
      @phone = phone unless phone == SKIP
      @phone_type = phone_type unless phone_type == SKIP
      @email_address = email_address unless email_address == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      address_line1 = hash.key?('addressLine1') ? hash['addressLine1'] : nil
      city = hash.key?('city') ? hash['city'] : nil
      state = hash.key?('state') ? hash['state'] : nil
      zip = hash.key?('zip') ? hash['zip'] : nil
      country = hash.key?('country') ? hash['country'] : nil
      address_line2 = hash.key?('addressLine2') ? hash['addressLine2'] : SKIP
      zip4 = hash.key?('zip4') ? hash['zip4'] : SKIP
      phone = hash.key?('phone') ? hash['phone'] : SKIP
      phone_type = hash.key?('phoneType') ? hash['phoneType'] : SKIP
      email_address = hash.key?('emailAddress') ? hash['emailAddress'] : SKIP

      # Create object from extracted values.
      Address.new(address_line1,
                  city,
                  state,
                  zip,
                  country,
                  address_line2,
                  zip4,
                  phone,
                  phone_type,
                  email_address)
    end
  end
end
