# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # ServiceInstancesResult Model.
  class ServiceInstancesResult < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :count

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :mnext

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :previous

    # TODO: Write general description for this method
    # @return [Array[ServiceInstancesResultSetItem]]
    attr_accessor :result_set

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['count'] = 'count'
      @_hash['mnext'] = 'next'
      @_hash['previous'] = 'previous'
      @_hash['result_set'] = 'resultSet'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        count
        mnext
        previous
        result_set
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(count = SKIP,
                   mnext = SKIP,
                   previous = SKIP,
                   result_set = SKIP)
      @count = count unless count == SKIP
      @mnext = mnext unless mnext == SKIP
      @previous = previous unless previous == SKIP
      @result_set = result_set unless result_set == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      count = hash.key?('count') ? hash['count'] : SKIP
      mnext = hash.key?('next') ? hash['next'] : SKIP
      previous = hash.key?('previous') ? hash['previous'] : SKIP
      # Parameter is an array, so we need to iterate through it
      result_set = nil
      unless hash['resultSet'].nil?
        result_set = []
        hash['resultSet'].each do |structure|
          result_set << (ServiceInstancesResultSetItem.from_hash(structure) if structure)
        end
      end

      result_set = SKIP unless hash.key?('resultSet')

      # Create object from extracted values.
      ServiceInstancesResult.new(count,
                                 mnext,
                                 previous,
                                 result_set)
    end
  end
end
