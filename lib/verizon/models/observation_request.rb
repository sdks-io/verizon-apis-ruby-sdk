# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Used to define callbacks including the device identity, the attribute names,
  # corresponding attribute values and the date/timestamp of when the
  # observation was made.
  class ObservationRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Account identifier in "##########-#####".
    # @return [String]
    attr_accessor :account_name

    # List of devices.
    # @return [Array[Device]]
    attr_accessor :devices

    # Attributes are streaming RF parameters that you want to observe.
    # @return [Array[ObservationRequestAttribute]]
    attr_accessor :attributes

    # Describes value and unit of time.
    # @return [NumericalData]
    attr_accessor :frequency

    # Describes value and unit of time.
    # @return [NumericalData]
    attr_accessor :duration

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['devices'] = 'devices'
      @_hash['attributes'] = 'attributes'
      @_hash['frequency'] = 'frequency'
      @_hash['duration'] = 'duration'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        frequency
        duration
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name = nil,
                   devices = nil,
                   attributes = nil,
                   frequency = SKIP,
                   duration = SKIP)
      @account_name = account_name
      @devices = devices
      @attributes = attributes
      @frequency = frequency unless frequency == SKIP
      @duration = duration unless duration == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : nil
      # Parameter is an array, so we need to iterate through it
      devices = nil
      unless hash['devices'].nil?
        devices = []
        hash['devices'].each do |structure|
          devices << (Device.from_hash(structure) if structure)
        end
      end

      devices = nil unless hash.key?('devices')
      # Parameter is an array, so we need to iterate through it
      attributes = nil
      unless hash['attributes'].nil?
        attributes = []
        hash['attributes'].each do |structure|
          attributes << (ObservationRequestAttribute.from_hash(structure) if structure)
        end
      end

      attributes = nil unless hash.key?('attributes')
      frequency = NumericalData.from_hash(hash['frequency']) if hash['frequency']
      duration = NumericalData.from_hash(hash['duration']) if hash['duration']

      # Create object from extracted values.
      ObservationRequest.new(account_name,
                             devices,
                             attributes,
                             frequency,
                             duration)
    end
  end
end
