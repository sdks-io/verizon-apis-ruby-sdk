# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Request to move active devices from one billing account to another within a
  # customer profile.
  class MoveDeviceRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name of the billing account that you want to move the devices to.
    # @return [String]
    attr_accessor :account_name

    # Specify the kind of the device identifier, the type of match, and the
    # string that you want to match.
    # @return [DeviceFilter]
    attr_accessor :filter

    # Custom field names and values, if you want to only include devices that
    # have matching values.
    # @return [Array[CustomFields]]
    attr_accessor :custom_fields

    # Up to 10,000 devices that you want to move to a different account,
    # specified by device identifier.
    # @return [Array[AccountDeviceList]]
    attr_accessor :devices

    # The name of a device group, to only include devices in that group.
    # @return [String]
    attr_accessor :group_name

    # The pool from which device IP addresses will be derived in the new
    # account. If you do not include this element, the default pool will be
    # used.
    # @return [String]
    attr_accessor :carrier_ip_pool_name

    # The service plan code that you want to assign to the devices in the new
    # account. If you do not include this element, ThingSpace will attempt to
    # use the current service plan, which will result in a error if the new
    # account does not have that service plan.
    # @return [String]
    attr_accessor :service_plan

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['filter'] = 'filter'
      @_hash['custom_fields'] = 'customFields'
      @_hash['devices'] = 'devices'
      @_hash['group_name'] = 'groupName'
      @_hash['carrier_ip_pool_name'] = 'carrierIpPoolName'
      @_hash['service_plan'] = 'servicePlan'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_name
        filter
        custom_fields
        devices
        group_name
        carrier_ip_pool_name
        service_plan
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name = SKIP,
                   filter = SKIP,
                   custom_fields = SKIP,
                   devices = SKIP,
                   group_name = SKIP,
                   carrier_ip_pool_name = SKIP,
                   service_plan = SKIP)
      @account_name = account_name unless account_name == SKIP
      @filter = filter unless filter == SKIP
      @custom_fields = custom_fields unless custom_fields == SKIP
      @devices = devices unless devices == SKIP
      @group_name = group_name unless group_name == SKIP
      @carrier_ip_pool_name = carrier_ip_pool_name unless carrier_ip_pool_name == SKIP
      @service_plan = service_plan unless service_plan == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP
      filter = DeviceFilter.from_hash(hash['filter']) if hash['filter']
      # Parameter is an array, so we need to iterate through it
      custom_fields = nil
      unless hash['customFields'].nil?
        custom_fields = []
        hash['customFields'].each do |structure|
          custom_fields << (CustomFields.from_hash(structure) if structure)
        end
      end

      custom_fields = SKIP unless hash.key?('customFields')
      # Parameter is an array, so we need to iterate through it
      devices = nil
      unless hash['devices'].nil?
        devices = []
        hash['devices'].each do |structure|
          devices << (AccountDeviceList.from_hash(structure) if structure)
        end
      end

      devices = SKIP unless hash.key?('devices')
      group_name = hash.key?('groupName') ? hash['groupName'] : SKIP
      carrier_ip_pool_name =
        hash.key?('carrierIpPoolName') ? hash['carrierIpPoolName'] : SKIP
      service_plan = hash.key?('servicePlan') ? hash['servicePlan'] : SKIP

      # Create object from extracted values.
      MoveDeviceRequest.new(account_name,
                            filter,
                            custom_fields,
                            devices,
                            group_name,
                            carrier_ip_pool_name,
                            service_plan)
    end
  end
end
