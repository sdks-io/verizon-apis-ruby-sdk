# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Node Model.
  class Node < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_at

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :modified_at

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :node_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :private_ip

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :num_cores

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :total_memory

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :cluster_id

    # TODO: Write general description for this method
    # @return [Array[String]]
    attr_accessor :roles

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :approved

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['created_at'] = 'created_at'
      @_hash['modified_at'] = 'modified_at'
      @_hash['node_id'] = 'node_id'
      @_hash['private_ip'] = 'private_ip'
      @_hash['num_cores'] = 'num_cores'
      @_hash['total_memory'] = 'total_memory'
      @_hash['cluster_id'] = 'cluster_id'
      @_hash['roles'] = 'roles'
      @_hash['id'] = 'id'
      @_hash['approved'] = 'approved'
      @_hash['status'] = 'status'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        created_at
        modified_at
        node_id
        private_ip
        num_cores
        total_memory
        cluster_id
        roles
        id
        approved
        status
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = SKIP,
                   created_at = SKIP,
                   modified_at = SKIP,
                   node_id = SKIP,
                   private_ip = SKIP,
                   num_cores = SKIP,
                   total_memory = SKIP,
                   cluster_id = SKIP,
                   roles = SKIP,
                   id = SKIP,
                   approved = SKIP,
                   status = SKIP)
      @name = name unless name == SKIP
      @created_at = created_at unless created_at == SKIP
      @modified_at = modified_at unless modified_at == SKIP
      @node_id = node_id unless node_id == SKIP
      @private_ip = private_ip unless private_ip == SKIP
      @num_cores = num_cores unless num_cores == SKIP
      @total_memory = total_memory unless total_memory == SKIP
      @cluster_id = cluster_id unless cluster_id == SKIP
      @roles = roles unless roles == SKIP
      @id = id unless id == SKIP
      @approved = approved unless approved == SKIP
      @status = status unless status == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : SKIP
      created_at = hash.key?('created_at') ? hash['created_at'] : SKIP
      modified_at = hash.key?('modified_at') ? hash['modified_at'] : SKIP
      node_id = hash.key?('node_id') ? hash['node_id'] : SKIP
      private_ip = hash.key?('private_ip') ? hash['private_ip'] : SKIP
      num_cores = hash.key?('num_cores') ? hash['num_cores'] : SKIP
      total_memory = hash.key?('total_memory') ? hash['total_memory'] : SKIP
      cluster_id = hash.key?('cluster_id') ? hash['cluster_id'] : SKIP
      roles = hash.key?('roles') ? hash['roles'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      approved = hash.key?('approved') ? hash['approved'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP

      # Create object from extracted values.
      Node.new(name,
               created_at,
               modified_at,
               node_id,
               private_ip,
               num_cores,
               total_memory,
               cluster_id,
               roles,
               id,
               approved,
               status)
    end
  end
end
