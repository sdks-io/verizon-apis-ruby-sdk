# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # AdvanceConfiguration Model.
  class AdvanceConfiguration < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :service_role_arn

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :service_role_permission_boundary

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :enable_proxy

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :http_proxy

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :https_proxy

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :no_proxy

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :proxy_root_ca

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :enable_tls_traffic

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :enable_auto_approve

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :enable_multi_master

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :enable_dedicated_master

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['service_role_arn'] = 'serviceRoleArn'
      @_hash['service_role_permission_boundary'] =
        'serviceRolePermissionBoundary'
      @_hash['enable_proxy'] = 'enableProxy'
      @_hash['http_proxy'] = 'httpProxy'
      @_hash['https_proxy'] = 'httpsProxy'
      @_hash['no_proxy'] = 'noProxy'
      @_hash['proxy_root_ca'] = 'proxyRootCA'
      @_hash['enable_tls_traffic'] = 'enableTlsTraffic'
      @_hash['enable_auto_approve'] = 'enableAutoApprove'
      @_hash['enable_multi_master'] = 'enableMultiMaster'
      @_hash['enable_dedicated_master'] = 'enableDedicatedMaster'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        service_role_arn
        service_role_permission_boundary
        enable_proxy
        http_proxy
        https_proxy
        no_proxy
        proxy_root_ca
        enable_tls_traffic
        enable_auto_approve
        enable_multi_master
        enable_dedicated_master
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(service_role_arn = SKIP,
                   service_role_permission_boundary = SKIP,
                   enable_proxy = false,
                   http_proxy = SKIP,
                   https_proxy = SKIP,
                   no_proxy = SKIP,
                   proxy_root_ca = SKIP,
                   enable_tls_traffic = false,
                   enable_auto_approve = false,
                   enable_multi_master = false,
                   enable_dedicated_master = false)
      @service_role_arn = service_role_arn unless service_role_arn == SKIP
      unless service_role_permission_boundary == SKIP
        @service_role_permission_boundary =
          service_role_permission_boundary
      end
      @enable_proxy = enable_proxy unless enable_proxy == SKIP
      @http_proxy = http_proxy unless http_proxy == SKIP
      @https_proxy = https_proxy unless https_proxy == SKIP
      @no_proxy = no_proxy unless no_proxy == SKIP
      @proxy_root_ca = proxy_root_ca unless proxy_root_ca == SKIP
      @enable_tls_traffic = enable_tls_traffic unless enable_tls_traffic == SKIP
      @enable_auto_approve = enable_auto_approve unless enable_auto_approve == SKIP
      @enable_multi_master = enable_multi_master unless enable_multi_master == SKIP
      @enable_dedicated_master = enable_dedicated_master unless enable_dedicated_master == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      service_role_arn =
        hash.key?('serviceRoleArn') ? hash['serviceRoleArn'] : SKIP
      service_role_permission_boundary =
        hash.key?('serviceRolePermissionBoundary') ? hash['serviceRolePermissionBoundary'] : SKIP
      enable_proxy = hash['enableProxy'] ||= false
      http_proxy = hash.key?('httpProxy') ? hash['httpProxy'] : SKIP
      https_proxy = hash.key?('httpsProxy') ? hash['httpsProxy'] : SKIP
      no_proxy = hash.key?('noProxy') ? hash['noProxy'] : SKIP
      proxy_root_ca = hash.key?('proxyRootCA') ? hash['proxyRootCA'] : SKIP
      enable_tls_traffic = hash['enableTlsTraffic'] ||= false
      enable_auto_approve = hash['enableAutoApprove'] ||= false
      enable_multi_master = hash['enableMultiMaster'] ||= false
      enable_dedicated_master = hash['enableDedicatedMaster'] ||= false

      # Create object from extracted values.
      AdvanceConfiguration.new(service_role_arn,
                               service_role_permission_boundary,
                               enable_proxy,
                               http_proxy,
                               https_proxy,
                               no_proxy,
                               proxy_root_ca,
                               enable_tls_traffic,
                               enable_auto_approve,
                               enable_multi_master,
                               enable_dedicated_master)
    end
  end
end
