# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # Available firmware.
  class FirmwarePackage < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Firmware name.
    # @return [String]
    attr_accessor :firmware_name

    # Firmware from version.
    # @return [String]
    attr_accessor :firmware_from

    # Firmware to version.
    # @return [String]
    attr_accessor :firmware_to

    # Firmware launch date.
    # @return [DateTime]
    attr_accessor :launch_date

    # Firmware release note.
    # @return [String]
    attr_accessor :release_note

    # Firmware applicable device model.
    # @return [String]
    attr_accessor :model

    # Firmware applicable device make.
    # @return [String]
    attr_accessor :make

    # Firmware protocol. Valid values include: LWM2M, OMD-DM.
    # @return [CampaignMetaInfoProtocolEnum]
    attr_accessor :protocol

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['firmware_name'] = 'firmwareName'
      @_hash['firmware_from'] = 'firmwareFrom'
      @_hash['firmware_to'] = 'firmwareTo'
      @_hash['launch_date'] = 'launchDate'
      @_hash['release_note'] = 'releaseNote'
      @_hash['model'] = 'model'
      @_hash['make'] = 'make'
      @_hash['protocol'] = 'protocol'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(firmware_name = nil,
                   firmware_from = nil,
                   firmware_to = nil,
                   launch_date = nil,
                   release_note = nil,
                   model = nil,
                   make = nil,
                   protocol = CampaignMetaInfoProtocolEnum::LW_M2M)
      @firmware_name = firmware_name
      @firmware_from = firmware_from
      @firmware_to = firmware_to
      @launch_date = launch_date
      @release_note = release_note
      @model = model
      @make = make
      @protocol = protocol
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      firmware_name = hash.key?('firmwareName') ? hash['firmwareName'] : nil
      firmware_from = hash.key?('firmwareFrom') ? hash['firmwareFrom'] : nil
      firmware_to = hash.key?('firmwareTo') ? hash['firmwareTo'] : nil
      launch_date = if hash.key?('launchDate')
                      (DateTimeHelper.from_rfc3339(hash['launchDate']) if hash['launchDate'])
                    end
      release_note = hash.key?('releaseNote') ? hash['releaseNote'] : nil
      model = hash.key?('model') ? hash['model'] : nil
      make = hash.key?('make') ? hash['make'] : nil
      protocol = hash['protocol'] ||= CampaignMetaInfoProtocolEnum::LW_M2M

      # Create object from extracted values.
      FirmwarePackage.new(firmware_name,
                          firmware_from,
                          firmware_to,
                          launch_date,
                          release_note,
                          model,
                          make,
                          protocol)
    end

    def to_launch_date
      DateTimeHelper.to_rfc3339(launch_date)
    end
  end
end
