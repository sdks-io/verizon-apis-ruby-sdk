# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Firmware upgrades information.
  class DeviceFirmwareUpgrade < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Device identifier.
    # @return [String]
    attr_accessor :device_id

    # Campaign identifier.
    # @return [String]
    attr_accessor :campaign_id

    # Account identifier.
    # @return [String]
    attr_accessor :account_name

    # Firmware name.
    # @return [String]
    attr_accessor :firmware_name

    # Old firmware version.
    # @return [String]
    attr_accessor :firmware_from

    # New firmware version.
    # @return [String]
    attr_accessor :firmware_to

    # Firmware upgrade start date.
    # @return [Date]
    attr_accessor :start_date

    # Firmware upgrade status.
    # @return [String]
    attr_accessor :status

    # Software upgrade result reason.
    # @return [String]
    attr_accessor :reason

    # Report updated time.
    # @return [String]
    attr_accessor :report_updated_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'deviceId'
      @_hash['campaign_id'] = 'campaignId'
      @_hash['account_name'] = 'accountName'
      @_hash['firmware_name'] = 'firmwareName'
      @_hash['firmware_from'] = 'firmwareFrom'
      @_hash['firmware_to'] = 'firmwareTo'
      @_hash['start_date'] = 'startDate'
      @_hash['status'] = 'status'
      @_hash['reason'] = 'reason'
      @_hash['report_updated_time'] = 'reportUpdatedTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        firmware_name
        firmware_from
        firmware_to
        report_updated_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id = nil,
                   campaign_id = nil,
                   account_name = nil,
                   start_date = nil,
                   status = nil,
                   reason = nil,
                   firmware_name = SKIP,
                   firmware_from = SKIP,
                   firmware_to = SKIP,
                   report_updated_time = SKIP)
      @device_id = device_id
      @campaign_id = campaign_id
      @account_name = account_name
      @firmware_name = firmware_name unless firmware_name == SKIP
      @firmware_from = firmware_from unless firmware_from == SKIP
      @firmware_to = firmware_to unless firmware_to == SKIP
      @start_date = start_date
      @status = status
      @reason = reason
      @report_updated_time = report_updated_time unless report_updated_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = hash.key?('deviceId') ? hash['deviceId'] : nil
      campaign_id = hash.key?('campaignId') ? hash['campaignId'] : nil
      account_name = hash.key?('accountName') ? hash['accountName'] : nil
      start_date = hash.key?('startDate') ? hash['startDate'] : nil
      status = hash.key?('status') ? hash['status'] : nil
      reason = hash.key?('reason') ? hash['reason'] : nil
      firmware_name = hash.key?('firmwareName') ? hash['firmwareName'] : SKIP
      firmware_from = hash.key?('firmwareFrom') ? hash['firmwareFrom'] : SKIP
      firmware_to = hash.key?('firmwareTo') ? hash['firmwareTo'] : SKIP
      report_updated_time =
        hash.key?('reportUpdatedTime') ? hash['reportUpdatedTime'] : SKIP

      # Create object from extracted values.
      DeviceFirmwareUpgrade.new(device_id,
                                campaign_id,
                                account_name,
                                start_date,
                                status,
                                reason,
                                firmware_name,
                                firmware_from,
                                firmware_to,
                                report_updated_time)
    end
  end
end
