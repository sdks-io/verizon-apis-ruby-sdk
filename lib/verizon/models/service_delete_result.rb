# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Response to delete a service.
  class ServiceDeleteResult < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Service which is selected.
    # @return [SelectedService]
    attr_accessor :selected_service

    # List of dependent services.
    # @return [Array[DependentService]]
    attr_accessor :dependent_service

    # List of running Instance.
    # @return [Array[RunningInstance]]
    attr_accessor :running_instances

    # Error response attribute of a service.
    # @return [EdgeServiceOnboardingResult]
    attr_accessor :error_details

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['selected_service'] = 'selectedService'
      @_hash['dependent_service'] = 'dependentService'
      @_hash['running_instances'] = 'runningInstances'
      @_hash['error_details'] = 'errorDetails'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        selected_service
        dependent_service
        running_instances
        error_details
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(selected_service = SKIP,
                   dependent_service = SKIP,
                   running_instances = SKIP,
                   error_details = SKIP)
      @selected_service = selected_service unless selected_service == SKIP
      @dependent_service = dependent_service unless dependent_service == SKIP
      @running_instances = running_instances unless running_instances == SKIP
      @error_details = error_details unless error_details == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      selected_service = SelectedService.from_hash(hash['selectedService']) if
        hash['selectedService']
      # Parameter is an array, so we need to iterate through it
      dependent_service = nil
      unless hash['dependentService'].nil?
        dependent_service = []
        hash['dependentService'].each do |structure|
          dependent_service << (DependentService.from_hash(structure) if structure)
        end
      end

      dependent_service = SKIP unless hash.key?('dependentService')
      # Parameter is an array, so we need to iterate through it
      running_instances = nil
      unless hash['runningInstances'].nil?
        running_instances = []
        hash['runningInstances'].each do |structure|
          running_instances << (RunningInstance.from_hash(structure) if structure)
        end
      end

      running_instances = SKIP unless hash.key?('runningInstances')
      error_details = EdgeServiceOnboardingResult.from_hash(hash['errorDetails']) if
        hash['errorDetails']

      # Create object from extracted values.
      ServiceDeleteResult.new(selected_service,
                              dependent_service,
                              running_instances,
                              error_details)
    end
  end
end
