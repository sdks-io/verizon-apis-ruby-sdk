# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The details of the UsageAnomaly trigger.
  class UsageAnomalyAttributes < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The Verizon billing account associated with the anomaly triggers for this
    # trigger to be active for devices in those accounts. An account name is
    # usually numeric, and must include any leading zeros.
    # @return [String]
    attr_accessor :account_names

    # The names of device groups associated with the anomaly triggers for this
    # trigger to be active for devices in those groups.
    # @return [String]
    attr_accessor :device_group

    # Whether or not to include anomalies classified as 'abnormal'.<br />true<br
    # />false<br />Classification is set as part of ThingSpace Intelligence
    # anomaly detection settings.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_abnormal

    # Whether or not to include anomalies classified as 'very abnormal'.<br
    # />true<br />false<br />Classification is set as part of ThingSpace
    # Intelligence anomaly detection settings.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_very_abnormal

    # Whether or not to include anomalies that are directionally under the
    # expected usage.<br />true<br />false.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_under_expected_usage

    # Whether or not to include anomalies that are directionally over the
    # expected usage. <br />true<br />false.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_over_expected_usage

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_names'] = 'accountNames'
      @_hash['device_group'] = 'deviceGroup'
      @_hash['include_abnormal'] = 'includeAbnormal'
      @_hash['include_very_abnormal'] = 'includeVeryAbnormal'
      @_hash['include_under_expected_usage'] = 'includeUnderExpectedUsage'
      @_hash['include_over_expected_usage'] = 'includeOverExpectedUsage'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_names
        device_group
        include_abnormal
        include_very_abnormal
        include_under_expected_usage
        include_over_expected_usage
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_names = SKIP,
                   device_group = SKIP,
                   include_abnormal = SKIP,
                   include_very_abnormal = SKIP,
                   include_under_expected_usage = SKIP,
                   include_over_expected_usage = SKIP)
      @account_names = account_names unless account_names == SKIP
      @device_group = device_group unless device_group == SKIP
      @include_abnormal = include_abnormal unless include_abnormal == SKIP
      @include_very_abnormal = include_very_abnormal unless include_very_abnormal == SKIP
      unless include_under_expected_usage == SKIP
        @include_under_expected_usage =
          include_under_expected_usage
      end
      unless include_over_expected_usage == SKIP
        @include_over_expected_usage =
          include_over_expected_usage
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_names = hash.key?('accountNames') ? hash['accountNames'] : SKIP
      device_group = hash.key?('deviceGroup') ? hash['deviceGroup'] : SKIP
      include_abnormal =
        hash.key?('includeAbnormal') ? hash['includeAbnormal'] : SKIP
      include_very_abnormal =
        hash.key?('includeVeryAbnormal') ? hash['includeVeryAbnormal'] : SKIP
      include_under_expected_usage =
        hash.key?('includeUnderExpectedUsage') ? hash['includeUnderExpectedUsage'] : SKIP
      include_over_expected_usage =
        hash.key?('includeOverExpectedUsage') ? hash['includeOverExpectedUsage'] : SKIP

      # Create object from extracted values.
      UsageAnomalyAttributes.new(account_names,
                                 device_group,
                                 include_abnormal,
                                 include_very_abnormal,
                                 include_under_expected_usage,
                                 include_over_expected_usage)
    end
  end
end
