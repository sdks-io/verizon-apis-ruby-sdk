# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Request to retrieve cost center value of a device.
  class DeviceCostCenterRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name of a billing account.
    # @return [String]
    attr_accessor :account_name

    # The new cost center code. Valid values are any string of up to 36
    # alphanumeric characters, space, dash, exclamation point, and pound sign.
    # @return [String]
    attr_accessor :cost_center

    # Custom field names and values, if you want to only include devices that
    # have matching values.
    # @return [Array[CustomFields]]
    attr_accessor :custom_fields

    # A list of the devices that you want to change, specified by device
    # identifier. Do not include accountName, groupName, customFields, or
    # servicePlan if you use this parameter.
    # @return [Array[AccountDeviceList]]
    attr_accessor :devices

    # The name of a device group, if you want to only include devices in that
    # group.
    # @return [String]
    attr_accessor :group_name

    # The customer name and the address of the device's primary place of use.
    # These values are applied to all devices in the request.The Primary Place
    # of Use location may affect taxation or have other legal implications. You
    # may want to speak with legal and/or financial advisers before entering
    # values for these fields.
    # @return [Object]
    attr_accessor :primary_place_of_use

    # Set to true to remove the cost center code value. This flag takes
    # precedence over a new costCenter value. If this flag is true and
    # costCenter has a value, the cost center code is removed. Do not include
    # this parameter, or set it to false to change the costCenter value.
    # @return [TrueClass | FalseClass]
    attr_accessor :remove_cost_center

    # The name of a service plan, if you want to only include devices that have
    # that service plan.
    # @return [String]
    attr_accessor :service_plan

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['cost_center'] = 'costCenter'
      @_hash['custom_fields'] = 'customFields'
      @_hash['devices'] = 'devices'
      @_hash['group_name'] = 'groupName'
      @_hash['primary_place_of_use'] = 'primaryPlaceOfUse'
      @_hash['remove_cost_center'] = 'removeCostCenter'
      @_hash['service_plan'] = 'servicePlan'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_name
        cost_center
        custom_fields
        devices
        group_name
        primary_place_of_use
        remove_cost_center
        service_plan
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name = SKIP,
                   cost_center = SKIP,
                   custom_fields = SKIP,
                   devices = SKIP,
                   group_name = SKIP,
                   primary_place_of_use = SKIP,
                   remove_cost_center = SKIP,
                   service_plan = SKIP)
      @account_name = account_name unless account_name == SKIP
      @cost_center = cost_center unless cost_center == SKIP
      @custom_fields = custom_fields unless custom_fields == SKIP
      @devices = devices unless devices == SKIP
      @group_name = group_name unless group_name == SKIP
      @primary_place_of_use = primary_place_of_use unless primary_place_of_use == SKIP
      @remove_cost_center = remove_cost_center unless remove_cost_center == SKIP
      @service_plan = service_plan unless service_plan == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP
      cost_center = hash.key?('costCenter') ? hash['costCenter'] : SKIP
      # Parameter is an array, so we need to iterate through it
      custom_fields = nil
      unless hash['customFields'].nil?
        custom_fields = []
        hash['customFields'].each do |structure|
          custom_fields << (CustomFields.from_hash(structure) if structure)
        end
      end

      custom_fields = SKIP unless hash.key?('customFields')
      # Parameter is an array, so we need to iterate through it
      devices = nil
      unless hash['devices'].nil?
        devices = []
        hash['devices'].each do |structure|
          devices << (AccountDeviceList.from_hash(structure) if structure)
        end
      end

      devices = SKIP unless hash.key?('devices')
      group_name = hash.key?('groupName') ? hash['groupName'] : SKIP
      primary_place_of_use =
        hash.key?('primaryPlaceOfUse') ? hash['primaryPlaceOfUse'] : SKIP
      remove_cost_center =
        hash.key?('removeCostCenter') ? hash['removeCostCenter'] : SKIP
      service_plan = hash.key?('servicePlan') ? hash['servicePlan'] : SKIP

      # Create object from extracted values.
      DeviceCostCenterRequest.new(account_name,
                                  cost_center,
                                  custom_fields,
                                  devices,
                                  group_name,
                                  primary_place_of_use,
                                  remove_cost_center,
                                  service_plan)
    end
  end
end
