# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Changes the identifier of a 3G or 4G device to match hardware changes made
  # for a line of service. Use this request to transfer the line of service and
  # the MDN to new hardware, or to change the MDN.
  class ChangeDeviceIdRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Set to true to assign a non-Geo MDN and MSISDN, or false to assign an MDN
    # and MSISDN from a specific NPA-NXX.
    # @return [TrueClass | FalseClass]
    attr_accessor :assign_non_geo_mdn

    # The type of change that you want to make for a 4G device.
    # @return [String]
    attr_accessor :change4g_option

    # The device that you want to change, specified by a device identifier.
    # @return [Array[DeviceId]]
    attr_accessor :device_ids

    # The new identifier for the device. Required for all change4GOptions except
    # ChangeMSISDN.
    # @return [Array[DeviceId]]
    attr_accessor :device_ids_to

    # The NPA NXX (area code and prefix) from which the MDN and MSISDN will be
    # derived when assignNonGeoMDN is false. Specify the 6-digit NPA NXX of the
    # location where the line of service will primarily be used. This API checks
    # to see if a number starting with the NPA NXX is available. If not, this
    # API uses the zipCode parameter, if specified, to assign a number in the
    # area of the line of service. This parameter is required when you change an
    # MDN/MSISDN for a B2B carrier, such as Verizon Wireless.
    # @return [String]
    attr_accessor :npa_nxx

    # The code for a different service plan, if you want to change the service
    # plan while changing the device identifier. Set this parameter to one of
    # the Code values returned by GET /plans.
    # @return [String]
    attr_accessor :service_plan

    # The ZIP code from which the MDN and MSISDN will be derived when
    # assignNonGeoMDN is true. Specify the zip code of the location where the
    # line of service will primarily be used.
    # @return [String]
    attr_accessor :zip_code

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['assign_non_geo_mdn'] = 'assignNonGeoMdn'
      @_hash['change4g_option'] = 'change4gOption'
      @_hash['device_ids'] = 'deviceIds'
      @_hash['device_ids_to'] = 'deviceIdsTo'
      @_hash['npa_nxx'] = 'npaNxx'
      @_hash['service_plan'] = 'servicePlan'
      @_hash['zip_code'] = 'zipCode'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        assign_non_geo_mdn
        change4g_option
        device_ids
        device_ids_to
        npa_nxx
        service_plan
        zip_code
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(assign_non_geo_mdn = SKIP,
                   change4g_option = SKIP,
                   device_ids = SKIP,
                   device_ids_to = SKIP,
                   npa_nxx = SKIP,
                   service_plan = SKIP,
                   zip_code = SKIP)
      @assign_non_geo_mdn = assign_non_geo_mdn unless assign_non_geo_mdn == SKIP
      @change4g_option = change4g_option unless change4g_option == SKIP
      @device_ids = device_ids unless device_ids == SKIP
      @device_ids_to = device_ids_to unless device_ids_to == SKIP
      @npa_nxx = npa_nxx unless npa_nxx == SKIP
      @service_plan = service_plan unless service_plan == SKIP
      @zip_code = zip_code unless zip_code == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      assign_non_geo_mdn =
        hash.key?('assignNonGeoMdn') ? hash['assignNonGeoMdn'] : SKIP
      change4g_option =
        hash.key?('change4gOption') ? hash['change4gOption'] : SKIP
      # Parameter is an array, so we need to iterate through it
      device_ids = nil
      unless hash['deviceIds'].nil?
        device_ids = []
        hash['deviceIds'].each do |structure|
          device_ids << (DeviceId.from_hash(structure) if structure)
        end
      end

      device_ids = SKIP unless hash.key?('deviceIds')
      # Parameter is an array, so we need to iterate through it
      device_ids_to = nil
      unless hash['deviceIdsTo'].nil?
        device_ids_to = []
        hash['deviceIdsTo'].each do |structure|
          device_ids_to << (DeviceId.from_hash(structure) if structure)
        end
      end

      device_ids_to = SKIP unless hash.key?('deviceIdsTo')
      npa_nxx = hash.key?('npaNxx') ? hash['npaNxx'] : SKIP
      service_plan = hash.key?('servicePlan') ? hash['servicePlan'] : SKIP
      zip_code = hash.key?('zipCode') ? hash['zipCode'] : SKIP

      # Create object from extracted values.
      ChangeDeviceIdRequest.new(assign_non_geo_mdn,
                                change4g_option,
                                device_ids,
                                device_ids_to,
                                npa_nxx,
                                service_plan,
                                zip_code)
    end
  end
end
