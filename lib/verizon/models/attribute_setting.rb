# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # Describes an attribute being observed and the frequency with which the
  # attribute is being observed.
  class AttributeSetting < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Attribute identifier.
    # @return [AttributeIdentifierEnum]
    attr_accessor :name

    # Attribute value.
    # @return [String]
    attr_accessor :value

    # Date and time request was created.
    # @return [DateTime]
    attr_accessor :created_on

    # Is the attribute observable?
    # @return [TrueClass | FalseClass]
    attr_accessor :is_observable

    # Is the attribute being observed?
    # @return [TrueClass | FalseClass]
    attr_accessor :is_observing

    # Describes value and unit of time.
    # @return [NumericalData]
    attr_accessor :frequency

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['value'] = 'value'
      @_hash['created_on'] = 'createdOn'
      @_hash['is_observable'] = 'isObservable'
      @_hash['is_observing'] = 'isObserving'
      @_hash['frequency'] = 'frequency'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        value
        created_on
        is_observable
        is_observing
        frequency
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = SKIP,
                   value = SKIP,
                   created_on = SKIP,
                   is_observable = SKIP,
                   is_observing = SKIP,
                   frequency = SKIP)
      @name = name unless name == SKIP
      @value = value unless value == SKIP
      @created_on = created_on unless created_on == SKIP
      @is_observable = is_observable unless is_observable == SKIP
      @is_observing = is_observing unless is_observing == SKIP
      @frequency = frequency unless frequency == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : SKIP
      value = hash.key?('value') ? hash['value'] : SKIP
      created_on = if hash.key?('createdOn')
                     (DateTimeHelper.from_rfc3339(hash['createdOn']) if hash['createdOn'])
                   else
                     SKIP
                   end
      is_observable = hash.key?('isObservable') ? hash['isObservable'] : SKIP
      is_observing = hash.key?('isObserving') ? hash['isObserving'] : SKIP
      frequency = NumericalData.from_hash(hash['frequency']) if hash['frequency']

      # Create object from extracted values.
      AttributeSetting.new(name,
                           value,
                           created_on,
                           is_observable,
                           is_observing,
                           frequency)
    end

    def to_created_on
      DateTimeHelper.to_rfc3339(created_on)
    end
  end
end
