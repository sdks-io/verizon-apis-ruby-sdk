# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # Status of the diagnostic services subscription.
  class DiagnosticsSubscription < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Account identifier in "##########-#####". An account name is usually
    # numeric, and must include any leading zeros.
    # @return [String]
    attr_accessor :account_name

    # The date and time of when the subscription was created.
    # @return [DateTime]
    attr_accessor :created_on

    # The date and time of when the subscription was last updated.
    # @return [DateTime]
    attr_accessor :last_updated

    # Number of licenses currently assigned to devices.
    # @return [Integer]
    attr_accessor :total_allowed

    # Number of licenses currently used by the devices.
    # @return [Integer]
    attr_accessor :total_used

    # Name of the SKU for the account.
    # @return [String]
    attr_accessor :sku_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['created_on'] = 'createdOn'
      @_hash['last_updated'] = 'lastUpdated'
      @_hash['total_allowed'] = 'totalAllowed'
      @_hash['total_used'] = 'totalUsed'
      @_hash['sku_name'] = 'skuName'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name = nil,
                   created_on = nil,
                   last_updated = nil,
                   total_allowed = nil,
                   total_used = nil,
                   sku_name = nil)
      @account_name = account_name
      @created_on = created_on
      @last_updated = last_updated
      @total_allowed = total_allowed
      @total_used = total_used
      @sku_name = sku_name
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : nil
      created_on = if hash.key?('createdOn')
                     (DateTimeHelper.from_rfc3339(hash['createdOn']) if hash['createdOn'])
                   end
      last_updated = if hash.key?('lastUpdated')
                       (DateTimeHelper.from_rfc3339(hash['lastUpdated']) if hash['lastUpdated'])
                     end
      total_allowed = hash.key?('totalAllowed') ? hash['totalAllowed'] : nil
      total_used = hash.key?('totalUsed') ? hash['totalUsed'] : nil
      sku_name = hash.key?('skuName') ? hash['skuName'] : nil

      # Create object from extracted values.
      DiagnosticsSubscription.new(account_name,
                                  created_on,
                                  last_updated,
                                  total_allowed,
                                  total_used,
                                  sku_name)
    end

    def to_created_on
      DateTimeHelper.to_rfc3339(created_on)
    end

    def to_last_updated
      DateTimeHelper.to_rfc3339(last_updated)
    end
  end
end
