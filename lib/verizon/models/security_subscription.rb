# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Subscription of the device.
  class SecuritySubscription < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Attributes of the subscription.
    # @return [Array[ExtendedAttributes]]
    attr_accessor :extended_attributes

    # The total number of licenses for this license type that are assigned to
    # device SIMs.
    # @return [Integer]
    attr_accessor :license_assigned

    # The total number of licenses for this license type that are available to
    # assign to device SIMs.
    # @return [Integer]
    attr_accessor :license_available

    # The total number of licenses purchased for the license type.
    # @return [Integer]
    attr_accessor :license_purchased

    # The license type associated with the skuNumber.
    # @return [String]
    attr_accessor :license_type

    # The skuNumber that identifies the license type.
    # @return [String]
    attr_accessor :sku_number

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['extended_attributes'] = 'extendedAttributes'
      @_hash['license_assigned'] = 'licenseAssigned'
      @_hash['license_available'] = 'licenseAvailable'
      @_hash['license_purchased'] = 'licensePurchased'
      @_hash['license_type'] = 'licenseType'
      @_hash['sku_number'] = 'skuNumber'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        extended_attributes
        license_assigned
        license_available
        license_purchased
        license_type
        sku_number
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(extended_attributes = SKIP,
                   license_assigned = SKIP,
                   license_available = SKIP,
                   license_purchased = SKIP,
                   license_type = SKIP,
                   sku_number = SKIP)
      @extended_attributes = extended_attributes unless extended_attributes == SKIP
      @license_assigned = license_assigned unless license_assigned == SKIP
      @license_available = license_available unless license_available == SKIP
      @license_purchased = license_purchased unless license_purchased == SKIP
      @license_type = license_type unless license_type == SKIP
      @sku_number = sku_number unless sku_number == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      extended_attributes = nil
      unless hash['extendedAttributes'].nil?
        extended_attributes = []
        hash['extendedAttributes'].each do |structure|
          extended_attributes << (ExtendedAttributes.from_hash(structure) if structure)
        end
      end

      extended_attributes = SKIP unless hash.key?('extendedAttributes')
      license_assigned =
        hash.key?('licenseAssigned') ? hash['licenseAssigned'] : SKIP
      license_available =
        hash.key?('licenseAvailable') ? hash['licenseAvailable'] : SKIP
      license_purchased =
        hash.key?('licensePurchased') ? hash['licensePurchased'] : SKIP
      license_type = hash.key?('licenseType') ? hash['licenseType'] : SKIP
      sku_number = hash.key?('skuNumber') ? hash['skuNumber'] : SKIP

      # Create object from extracted values.
      SecuritySubscription.new(extended_attributes,
                               license_assigned,
                               license_available,
                               license_purchased,
                               license_type,
                               sku_number)
    end
  end
end
