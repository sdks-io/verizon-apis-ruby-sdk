# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # List of device sensors and their most recently reported values.
  class SearchDeviceByPropertyFields < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Acceleration]
    attr_accessor :acceleration

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :battery

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :humidity

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :light

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pressure

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :signal_strength

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :temperature

    # TODO: Write general description for this method
    # @return [DevicePropertylocation]
    attr_accessor :device_propertylocation

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['acceleration'] = 'acceleration'
      @_hash['battery'] = 'battery'
      @_hash['humidity'] = 'humidity'
      @_hash['light'] = 'light'
      @_hash['pressure'] = 'pressure'
      @_hash['signal_strength'] = 'signalStrength'
      @_hash['temperature'] = 'temperature'
      @_hash['device_propertylocation'] = 'DevicePropertylocation'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        acceleration
        battery
        humidity
        light
        pressure
        signal_strength
        temperature
        device_propertylocation
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(acceleration = SKIP,
                   battery = SKIP,
                   humidity = SKIP,
                   light = SKIP,
                   pressure = SKIP,
                   signal_strength = SKIP,
                   temperature = SKIP,
                   device_propertylocation = SKIP)
      @acceleration = acceleration unless acceleration == SKIP
      @battery = battery unless battery == SKIP
      @humidity = humidity unless humidity == SKIP
      @light = light unless light == SKIP
      @pressure = pressure unless pressure == SKIP
      @signal_strength = signal_strength unless signal_strength == SKIP
      @temperature = temperature unless temperature == SKIP
      @device_propertylocation = device_propertylocation unless device_propertylocation == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      acceleration = Acceleration.from_hash(hash['acceleration']) if hash['acceleration']
      battery = hash.key?('battery') ? hash['battery'] : SKIP
      humidity = hash.key?('humidity') ? hash['humidity'] : SKIP
      light = hash.key?('light') ? hash['light'] : SKIP
      pressure = hash.key?('pressure') ? hash['pressure'] : SKIP
      signal_strength =
        hash.key?('signalStrength') ? hash['signalStrength'] : SKIP
      temperature = hash.key?('temperature') ? hash['temperature'] : SKIP
      device_propertylocation = DevicePropertylocation.from_hash(hash['DevicePropertylocation']) if
        hash['DevicePropertylocation']

      # Create object from extracted values.
      SearchDeviceByPropertyFields.new(acceleration,
                                       battery,
                                       humidity,
                                       light,
                                       pressure,
                                       signal_strength,
                                       temperature,
                                       device_propertylocation)
    end
  end
end
