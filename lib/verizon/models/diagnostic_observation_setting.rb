# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Diagnostic observation settings and attributes for a device.
  class DiagnosticObservationSetting < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name of the billing account for which callback messages will be sent.
    # Format: "##########-#####".
    # @return [String]
    attr_accessor :account_name

    # Identifies a particular IoT device.
    # @return [Device]
    attr_accessor :device

    # Streaming RF parameters for which you want to retrieve diagnostic
    # settings.
    # @return [Array[AttributeSetting]]
    attr_accessor :attributes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['device'] = 'device'
      @_hash['attributes'] = 'attributes'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_name
        device
        attributes
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name = SKIP,
                   device = SKIP,
                   attributes = SKIP)
      @account_name = account_name unless account_name == SKIP
      @device = device unless device == SKIP
      @attributes = attributes unless attributes == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP
      device = Device.from_hash(hash['device']) if hash['device']
      # Parameter is an array, so we need to iterate through it
      attributes = nil
      unless hash['attributes'].nil?
        attributes = []
        hash['attributes'].each do |structure|
          attributes << (AttributeSetting.from_hash(structure) if structure)
        end
      end

      attributes = SKIP unless hash.key?('attributes')

      # Create object from extracted values.
      DiagnosticObservationSetting.new(account_name,
                                       device,
                                       attributes)
    end
  end
end
