# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # Workload attribute of a service.
  class Workload < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The auto-generated Id of the workload.
    # @return [String]
    attr_accessor :id

    # Name of the workload needs to be deployed.
    # @return [String]
    attr_accessor :name

    # A brief workload description.
    # @return [String]
    attr_accessor :description

    # Deployment package type.
    # @return [ServiceDependencyPackageTypeEnum]
    attr_accessor :package_type

    # Allowed values are: GIT files (PULL_FROM_REPO), MANUAL_UPLOAD.
    # @return [UploadTypeEnum]
    attr_accessor :upload_type

    # Repository types allowed: GIT/HELM.
    # @return [WorkloadRepositoryTypeEnum]
    attr_accessor :repository_type

    # In case of 'Pull files from my repository', The user can provide the
    # existing repositoryID.
    # @return [String]
    attr_accessor :repository_id

    # Users can create a repository to maintain service artifacts. Repository
    # would be either a Git or HELM repository.
    # @return [Repository]
    attr_accessor :repository

    # Files which are being generated.
    # @return [Array[String]]
    attr_accessor :files

    # Revision type can be a BRANCH or TAG.
    # @return [WorkloadRevisionTypeEnum]
    attr_accessor :revision_type

    # Revision type can be a BRANCH or TAG.
    # @return [ServiceOnboardingHelmGitBranch]
    attr_accessor :helm_git_branch

    # Revision type can be a BRANCH or TAG.
    # @return [ServiceOnboardingHelmGitTag]
    attr_accessor :helm_git_tag

    # Revision type can be a BRANCH or TAG.
    # @return [ServiceOnboardingHelmYamlGitTag]
    attr_accessor :helm_yaml_git_tag

    # Revision type can be a BRANCH or TAG.
    # @return [ServiceOnboardingHelmHelmrepo]
    attr_accessor :helm_helmrepo

    # Revision type can be a BRANCH or TAG.
    # @return [ServiceOnboardingYamlGitBranch]
    attr_accessor :yaml_git_branch

    # Revision type can be a BRANCH or TAG.
    # @return [ServiceOnboardingTerraformGitBranch]
    attr_accessor :terraform_git_branch

    # Revision type can be a BRANCH or TAG.
    # @return [ServiceOnboardingTerraformGitTag]
    attr_accessor :terraform_git_tag

    # The date on which the workload is created.
    # @return [DateTime]
    attr_accessor :created_date

    # The date when the created workload was last modified.
    # @return [DateTime]
    attr_accessor :last_modified_dte

    # Identity of the user who created the workload.
    # @return [String]
    attr_accessor :created_by

    # Identity of the user who updated the workload.
    # @return [String]
    attr_accessor :updated_by

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['package_type'] = 'packageType'
      @_hash['upload_type'] = 'uploadType'
      @_hash['repository_type'] = 'repositoryType'
      @_hash['repository_id'] = 'repositoryId'
      @_hash['repository'] = 'repository'
      @_hash['files'] = 'files'
      @_hash['revision_type'] = 'revisionType'
      @_hash['helm_git_branch'] = 'helmGitBranch'
      @_hash['helm_git_tag'] = 'helmGitTag'
      @_hash['helm_yaml_git_tag'] = 'helmYamlGitTag'
      @_hash['helm_helmrepo'] = 'helmHelmrepo'
      @_hash['yaml_git_branch'] = 'yamlGitBranch'
      @_hash['terraform_git_branch'] = 'terraformGitBranch'
      @_hash['terraform_git_tag'] = 'terraformGitTag'
      @_hash['created_date'] = 'createdDate'
      @_hash['last_modified_dte'] = 'lastModifiedDte'
      @_hash['created_by'] = 'createdBy'
      @_hash['updated_by'] = 'updatedBy'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        description
        package_type
        upload_type
        repository_type
        repository_id
        repository
        files
        revision_type
        helm_git_branch
        helm_git_tag
        helm_yaml_git_tag
        helm_helmrepo
        yaml_git_branch
        terraform_git_branch
        terraform_git_tag
        created_date
        last_modified_dte
        created_by
        updated_by
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        description
        package_type
        repository_type
        repository_id
        files
      ]
    end

    def initialize(name = nil,
                   id = SKIP,
                   description = SKIP,
                   package_type = SKIP,
                   upload_type = SKIP,
                   repository_type = SKIP,
                   repository_id = SKIP,
                   repository = SKIP,
                   files = SKIP,
                   revision_type = SKIP,
                   helm_git_branch = SKIP,
                   helm_git_tag = SKIP,
                   helm_yaml_git_tag = SKIP,
                   helm_helmrepo = SKIP,
                   yaml_git_branch = SKIP,
                   terraform_git_branch = SKIP,
                   terraform_git_tag = SKIP,
                   created_date = SKIP,
                   last_modified_dte = SKIP,
                   created_by = SKIP,
                   updated_by = SKIP)
      @id = id unless id == SKIP
      @name = name
      @description = description unless description == SKIP
      @package_type = package_type unless package_type == SKIP
      @upload_type = upload_type unless upload_type == SKIP
      @repository_type = repository_type unless repository_type == SKIP
      @repository_id = repository_id unless repository_id == SKIP
      @repository = repository unless repository == SKIP
      @files = files unless files == SKIP
      @revision_type = revision_type unless revision_type == SKIP
      @helm_git_branch = helm_git_branch unless helm_git_branch == SKIP
      @helm_git_tag = helm_git_tag unless helm_git_tag == SKIP
      @helm_yaml_git_tag = helm_yaml_git_tag unless helm_yaml_git_tag == SKIP
      @helm_helmrepo = helm_helmrepo unless helm_helmrepo == SKIP
      @yaml_git_branch = yaml_git_branch unless yaml_git_branch == SKIP
      @terraform_git_branch = terraform_git_branch unless terraform_git_branch == SKIP
      @terraform_git_tag = terraform_git_tag unless terraform_git_tag == SKIP
      @created_date = created_date unless created_date == SKIP
      @last_modified_dte = last_modified_dte unless last_modified_dte == SKIP
      @created_by = created_by unless created_by == SKIP
      @updated_by = updated_by unless updated_by == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : nil
      id = hash.key?('id') ? hash['id'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      package_type = hash.key?('packageType') ? hash['packageType'] : SKIP
      upload_type = hash.key?('uploadType') ? hash['uploadType'] : SKIP
      repository_type =
        hash.key?('repositoryType') ? hash['repositoryType'] : SKIP
      repository_id = hash.key?('repositoryId') ? hash['repositoryId'] : SKIP
      repository = Repository.from_hash(hash['repository']) if hash['repository']
      files = hash.key?('files') ? hash['files'] : SKIP
      revision_type = hash.key?('revisionType') ? hash['revisionType'] : SKIP
      helm_git_branch = ServiceOnboardingHelmGitBranch.from_hash(hash['helmGitBranch']) if
        hash['helmGitBranch']
      helm_git_tag = ServiceOnboardingHelmGitTag.from_hash(hash['helmGitTag']) if
        hash['helmGitTag']
      helm_yaml_git_tag = ServiceOnboardingHelmYamlGitTag.from_hash(hash['helmYamlGitTag']) if
        hash['helmYamlGitTag']
      helm_helmrepo = ServiceOnboardingHelmHelmrepo.from_hash(hash['helmHelmrepo']) if
        hash['helmHelmrepo']
      yaml_git_branch = ServiceOnboardingYamlGitBranch.from_hash(hash['yamlGitBranch']) if
        hash['yamlGitBranch']
      if hash['terraformGitBranch']
        terraform_git_branch = ServiceOnboardingTerraformGitBranch.from_hash(hash['terraformGitBranch'])
      end
      terraform_git_tag = ServiceOnboardingTerraformGitTag.from_hash(hash['terraformGitTag']) if
        hash['terraformGitTag']
      created_date = if hash.key?('createdDate')
                       (DateTimeHelper.from_rfc3339(hash['createdDate']) if hash['createdDate'])
                     else
                       SKIP
                     end
      last_modified_dte = if hash.key?('lastModifiedDte')
                            (DateTimeHelper.from_rfc3339(hash['lastModifiedDte']) if hash['lastModifiedDte'])
                          else
                            SKIP
                          end
      created_by = hash.key?('createdBy') ? hash['createdBy'] : SKIP
      updated_by = hash.key?('updatedBy') ? hash['updatedBy'] : SKIP

      # Create object from extracted values.
      Workload.new(name,
                   id,
                   description,
                   package_type,
                   upload_type,
                   repository_type,
                   repository_id,
                   repository,
                   files,
                   revision_type,
                   helm_git_branch,
                   helm_git_tag,
                   helm_yaml_git_tag,
                   helm_helmrepo,
                   yaml_git_branch,
                   terraform_git_branch,
                   terraform_git_tag,
                   created_date,
                   last_modified_dte,
                   created_by,
                   updated_by)
    end

    def to_created_date
      DateTimeHelper.to_rfc3339(created_date)
    end

    def to_last_modified_dte
      DateTimeHelper.to_rfc3339(last_modified_dte)
    end
  end
end
