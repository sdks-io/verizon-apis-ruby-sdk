# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # UsageHistory Model.
  class UsageHistory < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :bytes_used

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :serviceplan

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :sms_used

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :mo_sms

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :mt_sms

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :source

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :event_date_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['bytes_used'] = 'bytesUsed'
      @_hash['serviceplan'] = 'serviceplan'
      @_hash['sms_used'] = 'smsUsed'
      @_hash['mo_sms'] = 'moSMS'
      @_hash['mt_sms'] = 'mtSMS'
      @_hash['source'] = 'source'
      @_hash['event_date_time'] = 'eventDateTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        bytes_used
        serviceplan
        sms_used
        mo_sms
        mt_sms
        source
        event_date_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(bytes_used = SKIP,
                   serviceplan = SKIP,
                   sms_used = SKIP,
                   mo_sms = SKIP,
                   mt_sms = SKIP,
                   source = SKIP,
                   event_date_time = SKIP)
      @bytes_used = bytes_used unless bytes_used == SKIP
      @serviceplan = serviceplan unless serviceplan == SKIP
      @sms_used = sms_used unless sms_used == SKIP
      @mo_sms = mo_sms unless mo_sms == SKIP
      @mt_sms = mt_sms unless mt_sms == SKIP
      @source = source unless source == SKIP
      @event_date_time = event_date_time unless event_date_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      bytes_used = hash.key?('bytesUsed') ? hash['bytesUsed'] : SKIP
      serviceplan = hash.key?('serviceplan') ? hash['serviceplan'] : SKIP
      sms_used = hash.key?('smsUsed') ? hash['smsUsed'] : SKIP
      mo_sms = hash.key?('moSMS') ? hash['moSMS'] : SKIP
      mt_sms = hash.key?('mtSMS') ? hash['mtSMS'] : SKIP
      source = hash.key?('source') ? hash['source'] : SKIP
      event_date_time = if hash.key?('eventDateTime')
                          (DateTimeHelper.from_rfc3339(hash['eventDateTime']) if hash['eventDateTime'])
                        else
                          SKIP
                        end

      # Create object from extracted values.
      UsageHistory.new(bytes_used,
                       serviceplan,
                       sms_used,
                       mo_sms,
                       mt_sms,
                       source,
                       event_date_time)
    end

    def to_custom_event_date_time
      DateTimeHelper.to_rfc3339(event_date_time)
    end
  end
end
