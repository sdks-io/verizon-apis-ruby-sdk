# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DataCenter Model.
  class DataCenter < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Packages are optimized for various operating environments. Prepackaged
    # images are available in OVA and QCOW formats.
    # @return [DataCenterPackageTypeEnum]
    attr_accessor :package_type

    # Supported Kubernetes distribution for the selected cloud provider.
    # @return [DataCenterDistributionEnum]
    attr_accessor :distribution

    # Indicate geo-location of cluster if you wish to use location based
    # policies.
    # @return [String]
    attr_accessor :location

    # Version of K8s platform.
    # @return [K8sVersionEnum]
    attr_accessor :k8s_version

    # Operating System for the master and worker nodes.
    # @return [String]
    attr_accessor :operating_system

    # Operating System for the master and worker nodes.
    # @return [Array[EdgeServiceLaunchParams]]
    attr_accessor :tags

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['package_type'] = 'packageType'
      @_hash['distribution'] = 'distribution'
      @_hash['location'] = 'location'
      @_hash['k8s_version'] = 'k8sVersion'
      @_hash['operating_system'] = 'operatingSystem'
      @_hash['tags'] = 'tags'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        package_type
        distribution
        location
        k8s_version
        operating_system
        tags
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(package_type = SKIP,
                   distribution = SKIP,
                   location = SKIP,
                   k8s_version = K8sVersionEnum::ENUM_118,
                   operating_system = SKIP,
                   tags = SKIP)
      @package_type = package_type unless package_type == SKIP
      @distribution = distribution unless distribution == SKIP
      @location = location unless location == SKIP
      @k8s_version = k8s_version unless k8s_version == SKIP
      @operating_system = operating_system unless operating_system == SKIP
      @tags = tags unless tags == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      package_type = hash.key?('packageType') ? hash['packageType'] : SKIP
      distribution = hash.key?('distribution') ? hash['distribution'] : SKIP
      location = hash.key?('location') ? hash['location'] : SKIP
      k8s_version = hash['k8sVersion'] ||= K8sVersionEnum::ENUM_118
      operating_system =
        hash.key?('operatingSystem') ? hash['operatingSystem'] : SKIP
      # Parameter is an array, so we need to iterate through it
      tags = nil
      unless hash['tags'].nil?
        tags = []
        hash['tags'].each do |structure|
          tags << (EdgeServiceLaunchParams.from_hash(structure) if structure)
        end
      end

      tags = SKIP unless hash.key?('tags')

      # Create object from extracted values.
      DataCenter.new(package_type,
                     distribution,
                     location,
                     k8s_version,
                     operating_system,
                     tags)
    end
  end
end
