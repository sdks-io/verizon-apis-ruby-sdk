# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The notification details of the trigger.
  class Notification < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The type of notification, i.e. 'DailySummary'.
    # @return [String]
    attr_accessor :notification_type

    # Whether or not the notification should be sent via callback.<br />true<br
    # />false.
    # @return [TrueClass | FalseClass]
    attr_accessor :callback

    # Whether or not the notification should be sent via e-mail.<br />true<br
    # />false.
    # @return [TrueClass | FalseClass]
    attr_accessor :email_notification

    # Name for the notification group.
    # @return [String]
    attr_accessor :notification_group_name

    # Frequency factor for notification.
    # @return [Integer]
    attr_accessor :notification_frequency_factor

    # Frequency interval for notification.
    # @return [String]
    attr_accessor :notification_frequency_interval

    # E-mail address(es) where the notification should be delivered.
    # @return [String]
    attr_accessor :external_email_recipients

    # SMS notification.
    # @return [TrueClass | FalseClass]
    attr_accessor :sms_notification

    # List of SMS numbers.
    # @return [Array[SMSNumber]]
    attr_accessor :sms_numbers

    # List of SMS numbers.
    # @return [TrueClass | FalseClass]
    attr_accessor :reminder

    # Severity level associated with the notification. Examples would be:<br
    # />Major<br />Minor<br />Critical<br />NotApplicable.
    # @return [String]
    attr_accessor :severity

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['notification_type'] = 'notificationType'
      @_hash['callback'] = 'callback'
      @_hash['email_notification'] = 'emailNotification'
      @_hash['notification_group_name'] = 'notificationGroupName'
      @_hash['notification_frequency_factor'] = 'notificationFrequencyFactor'
      @_hash['notification_frequency_interval'] =
        'notificationFrequencyInterval'
      @_hash['external_email_recipients'] = 'externalEmailRecipients'
      @_hash['sms_notification'] = 'smsNotification'
      @_hash['sms_numbers'] = 'smsNumbers'
      @_hash['reminder'] = 'reminder'
      @_hash['severity'] = 'severity'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        notification_type
        callback
        email_notification
        notification_group_name
        notification_frequency_factor
        notification_frequency_interval
        external_email_recipients
        sms_notification
        sms_numbers
        reminder
        severity
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(notification_type = SKIP,
                   callback = SKIP,
                   email_notification = SKIP,
                   notification_group_name = SKIP,
                   notification_frequency_factor = SKIP,
                   notification_frequency_interval = SKIP,
                   external_email_recipients = SKIP,
                   sms_notification = SKIP,
                   sms_numbers = SKIP,
                   reminder = SKIP,
                   severity = SKIP)
      @notification_type = notification_type unless notification_type == SKIP
      @callback = callback unless callback == SKIP
      @email_notification = email_notification unless email_notification == SKIP
      @notification_group_name = notification_group_name unless notification_group_name == SKIP
      unless notification_frequency_factor == SKIP
        @notification_frequency_factor =
          notification_frequency_factor
      end
      unless notification_frequency_interval == SKIP
        @notification_frequency_interval =
          notification_frequency_interval
      end
      unless external_email_recipients == SKIP
        @external_email_recipients =
          external_email_recipients
      end
      @sms_notification = sms_notification unless sms_notification == SKIP
      @sms_numbers = sms_numbers unless sms_numbers == SKIP
      @reminder = reminder unless reminder == SKIP
      @severity = severity unless severity == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      notification_type =
        hash.key?('notificationType') ? hash['notificationType'] : SKIP
      callback = hash.key?('callback') ? hash['callback'] : SKIP
      email_notification =
        hash.key?('emailNotification') ? hash['emailNotification'] : SKIP
      notification_group_name =
        hash.key?('notificationGroupName') ? hash['notificationGroupName'] : SKIP
      notification_frequency_factor =
        hash.key?('notificationFrequencyFactor') ? hash['notificationFrequencyFactor'] : SKIP
      notification_frequency_interval =
        hash.key?('notificationFrequencyInterval') ? hash['notificationFrequencyInterval'] : SKIP
      external_email_recipients =
        hash.key?('externalEmailRecipients') ? hash['externalEmailRecipients'] : SKIP
      sms_notification =
        hash.key?('smsNotification') ? hash['smsNotification'] : SKIP
      # Parameter is an array, so we need to iterate through it
      sms_numbers = nil
      unless hash['smsNumbers'].nil?
        sms_numbers = []
        hash['smsNumbers'].each do |structure|
          sms_numbers << (SMSNumber.from_hash(structure) if structure)
        end
      end

      sms_numbers = SKIP unless hash.key?('smsNumbers')
      reminder = hash.key?('reminder') ? hash['reminder'] : SKIP
      severity = hash.key?('severity') ? hash['severity'] : SKIP

      # Create object from extracted values.
      Notification.new(notification_type,
                       callback,
                       email_notification,
                       notification_group_name,
                       notification_frequency_factor,
                       notification_frequency_interval,
                       external_email_recipients,
                       sms_notification,
                       sms_numbers,
                       reminder,
                       severity)
    end
  end
end
