# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Request to update contact information.
  class ContactInfoUpdateRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The customer name and the address of the device's primary place of use.
    # Leave these fields empty to use the account profile address as the primary
    # place of use. These values will be applied to all devices in the
    # request.If the account is enabled for non-geographic MDNs and the device
    # supports it, the primaryPlaceOfUse address will also be used to derive the
    # MDN for the device.
    # @return [PlaceOfUse]
    attr_accessor :primary_place_of_use

    # The name of the billing account that the devices belong to. An account
    # name is usually numeric, and must include any leading zeros.
    # @return [String]
    attr_accessor :account_name

    # A list of the devices that you want to change, specified by device
    # identifier. You only need to provide one identifier per device. Do not
    # include accountName, groupName, customFields, or servicePlan if you use
    # this parameter.
    # @return [Array[AccountDeviceList]]
    attr_accessor :devices

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['primary_place_of_use'] = 'primaryPlaceOfUse'
      @_hash['account_name'] = 'accountName'
      @_hash['devices'] = 'devices'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_name
        devices
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(primary_place_of_use = nil,
                   account_name = SKIP,
                   devices = SKIP)
      @primary_place_of_use = primary_place_of_use
      @account_name = account_name unless account_name == SKIP
      @devices = devices unless devices == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      primary_place_of_use = PlaceOfUse.from_hash(hash['primaryPlaceOfUse']) if
        hash['primaryPlaceOfUse']
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP
      # Parameter is an array, so we need to iterate through it
      devices = nil
      unless hash['devices'].nil?
        devices = []
        hash['devices'].each do |structure|
          devices << (AccountDeviceList.from_hash(structure) if structure)
        end
      end

      devices = SKIP unless hash.key?('devices')

      # Create object from extracted values.
      ContactInfoUpdateRequest.new(primary_place_of_use,
                                   account_name,
                                   devices)
    end
  end
end
