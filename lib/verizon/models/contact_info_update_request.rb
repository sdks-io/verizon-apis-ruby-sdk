# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Request to update contact information.
  class ContactInfoUpdateRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name of the billing account that the devices belong to. An account
    # name is usually numeric, and must include any leading zeros.
    # @return [String]
    attr_accessor :account_name

    # A list of the devices that you want to change, specified by device
    # identifier. You only need to provide one identifier per device. Do not
    # include accountName, groupName, customFields, or servicePlan if you use
    # this parameter.
    # @return [Array[AccountDeviceList]]
    attr_accessor :devices

    # The customer name and the address of the device's primary place of use.
    # These values are applied to all devices in the request.The Primary Place
    # of Use location may affect taxation or have other legal implications. You
    # may want to speak with legal and/or financial advisers before entering
    # values for these fields.
    # @return [Object]
    attr_accessor :primary_place_of_use

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['devices'] = 'devices'
      @_hash['primary_place_of_use'] = 'primaryPlaceOfUse'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_name
        devices
        primary_place_of_use
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name = SKIP,
                   devices = SKIP,
                   primary_place_of_use = SKIP)
      @account_name = account_name unless account_name == SKIP
      @devices = devices unless devices == SKIP
      @primary_place_of_use = primary_place_of_use unless primary_place_of_use == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP
      # Parameter is an array, so we need to iterate through it
      devices = nil
      unless hash['devices'].nil?
        devices = []
        hash['devices'].each do |structure|
          devices << (AccountDeviceList.from_hash(structure) if structure)
        end
      end

      devices = SKIP unless hash.key?('devices')
      primary_place_of_use =
        hash.key?('primaryPlaceOfUse') ? hash['primaryPlaceOfUse'] : SKIP

      # Create object from extracted values.
      ContactInfoUpdateRequest.new(account_name,
                                   devices,
                                   primary_place_of_use)
    end
  end
end
