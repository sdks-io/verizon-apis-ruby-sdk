# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Account device information.
  class V2AccountDevice < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Device identifier.
    # @return [String]
    attr_accessor :device_id

    # MDN.
    # @return [String]
    attr_accessor :mdn

    # Device model.
    # @return [String]
    attr_accessor :model

    # Device make.
    # @return [String]
    attr_accessor :make

    # Device FOTA capable.
    # @return [TrueClass | FalseClass]
    attr_accessor :fota_eligible

    # Device application FOTA capable.
    # @return [TrueClass | FalseClass]
    attr_accessor :app_fota_eligible

    # License assigned device.
    # @return [TrueClass | FalseClass]
    attr_accessor :license_assigned

    # LWM2M, OMD-DM or HTTP.
    # @return [String]
    attr_accessor :distribution_type

    # List of sofware.
    # @return [Array[V2SoftwareInfo]]
    attr_accessor :software_list

    # The date and time of when the device is created.
    # @return [String]
    attr_accessor :create_time

    # The date and time of when the device firmware or software is upgraded.
    # @return [String]
    attr_accessor :upgrade_time

    # The date and time of when the device is updated.
    # @return [String]
    attr_accessor :update_time

    # The date and time of when the device is refreshed.
    # @return [String]
    attr_accessor :refresh_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'deviceId'
      @_hash['mdn'] = 'mdn'
      @_hash['model'] = 'model'
      @_hash['make'] = 'make'
      @_hash['fota_eligible'] = 'fotaEligible'
      @_hash['app_fota_eligible'] = 'appFotaEligible'
      @_hash['license_assigned'] = 'licenseAssigned'
      @_hash['distribution_type'] = 'distributionType'
      @_hash['software_list'] = 'softwareList'
      @_hash['create_time'] = 'createTime'
      @_hash['upgrade_time'] = 'upgradeTime'
      @_hash['update_time'] = 'updateTime'
      @_hash['refresh_time'] = 'refreshTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        create_time
        upgrade_time
        update_time
        refresh_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id = nil,
                   mdn = nil,
                   model = nil,
                   make = nil,
                   fota_eligible = nil,
                   app_fota_eligible = nil,
                   license_assigned = nil,
                   distribution_type = nil,
                   software_list = nil,
                   create_time = SKIP,
                   upgrade_time = SKIP,
                   update_time = SKIP,
                   refresh_time = SKIP)
      @device_id = device_id
      @mdn = mdn
      @model = model
      @make = make
      @fota_eligible = fota_eligible
      @app_fota_eligible = app_fota_eligible
      @license_assigned = license_assigned
      @distribution_type = distribution_type
      @software_list = software_list
      @create_time = create_time unless create_time == SKIP
      @upgrade_time = upgrade_time unless upgrade_time == SKIP
      @update_time = update_time unless update_time == SKIP
      @refresh_time = refresh_time unless refresh_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = hash.key?('deviceId') ? hash['deviceId'] : nil
      mdn = hash.key?('mdn') ? hash['mdn'] : nil
      model = hash.key?('model') ? hash['model'] : nil
      make = hash.key?('make') ? hash['make'] : nil
      fota_eligible = hash.key?('fotaEligible') ? hash['fotaEligible'] : nil
      app_fota_eligible =
        hash.key?('appFotaEligible') ? hash['appFotaEligible'] : nil
      license_assigned =
        hash.key?('licenseAssigned') ? hash['licenseAssigned'] : nil
      distribution_type =
        hash.key?('distributionType') ? hash['distributionType'] : nil
      # Parameter is an array, so we need to iterate through it
      software_list = nil
      unless hash['softwareList'].nil?
        software_list = []
        hash['softwareList'].each do |structure|
          software_list << (V2SoftwareInfo.from_hash(structure) if structure)
        end
      end

      software_list = nil unless hash.key?('softwareList')
      create_time = hash.key?('createTime') ? hash['createTime'] : SKIP
      upgrade_time = hash.key?('upgradeTime') ? hash['upgradeTime'] : SKIP
      update_time = hash.key?('updateTime') ? hash['updateTime'] : SKIP
      refresh_time = hash.key?('refreshTime') ? hash['refreshTime'] : SKIP

      # Create object from extracted values.
      V2AccountDevice.new(device_id,
                          mdn,
                          model,
                          make,
                          fota_eligible,
                          app_fota_eligible,
                          license_assigned,
                          distribution_type,
                          software_list,
                          create_time,
                          upgrade_time,
                          update_time,
                          refresh_time)
    end
  end
end
