# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # A customer service on 5G MEC platform using 5G MEC portal.
  class Service < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # System generated unique UUID.
    # @return [String]
    attr_accessor :id

    # Name of the service needs to be deployed.
    # @return [String]
    attr_accessor :name

    # Description of the service needs to be deployed.
    # @return [String]
    attr_accessor :description

    # Version of the service needs to be deployed.
    # @return [String]
    attr_accessor :version

    # Properties are metadata attributes.
    # @return [Array[ServiceOnboardingAdditionalParams]]
    attr_accessor :metadata

    # List of service tags.
    # @return [Array[ServiceTag]]
    attr_accessor :tags

    # Can be any name just to define it under a category.
    # @return [Array[String]]
    attr_accessor :categories

    # Boolean value to set/unset the service as favorite.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_favourite

    # Boolean to support soft delete of a version of a service.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_deleted

    # Compatibility would have the attribute CSP which is Cloud service provider
    # e.g. AWS_PUBLIC_CLOUD, AWS_WL, AWS_OUTPOST, AZURE_EDGE,
    # AZURE_PUBLIC_CLOUD.
    # @return [Array[Compatibility]]
    attr_accessor :compatibility

    # Resource of the service.
    # @return [ServiceResource]
    attr_accessor :resource

    # Auto-derived time of creation. Part of response only.
    # @return [DateTime]
    attr_accessor :created_date

    # Last modified time. Part of response only.
    # @return [DateTime]
    attr_accessor :last_modified_date

    # User who created the service. Part of response only.
    # @return [String]
    attr_accessor :created_by

    # User who last modified the service. Part of response only.
    # @return [String]
    attr_accessor :last_modified_by

    # Errors related to service.
    # @return [ServiceError]
    attr_accessor :error

    # Error response attribute of a service.
    # @return [EdgeServiceOnboardingResult]
    attr_accessor :error_response

    # Can have any value as - DRAFT, DESIGN, TESTING, PUBLISH, CERTIFY,
    # READY_TO_USE, DEPRECATE, DELETED.
    # @return [ServiceStateEnum]
    attr_accessor :state

    # Can have any value as - DRAFT_INPROGRESS, DRAFT_COMPLETE,
    # DESIGN_INPROGRESS, DESIGN_FAILED, DESIGN_COMPLETED, VALIDATION_INPROGRESS,
    #  VALIDATION_FAILED, VALIDATION_COMPLETED, TESTING_INPROGRESS,
    # TESTING_FAILED, TESTING_COMPLETED, READY_TO_USE_INPROGRESS,
    # READY_TO_USE_FAILED, READY_TO_USE_COMPLETED,
    # READY_TO_PRIVATE_USE_INPROGRESS, READY_TO_PRIVATE_USE_FAILED,
    # READY_TO_PRIVATE_USE_COMPLETED,  PUBLISH_INPROGRESS,  PUBLISH_FAILED,
    # PUBLISH_COMPLETED,  CERTIFY_INPROGRESS,  CERTIFY_FAILED,
    # CERTIFY_COMPLETED, DEPRECATE_INPROGRESS,  DEPRECATE_FAILED,
    # DEPRECATE_COMPLETED, MARKDELETE_INPROGRESS, MARKDELETE_FAILED,
    # MARKDELETE_COMPLETED.
    # @return [ServiceStatusEnum]
    attr_accessor :status

    # Service Type e.g. Installation, Operations, Custom.
    # @return [ServiceTypeEnum]
    attr_accessor :type

    # Auto-generated Id of serviceHandlerId created.
    # @return [ServiceHandlerId]
    attr_accessor :service_handler_id

    # Attribute of service.
    # @return [ObservabilityTemplate]
    attr_accessor :observability_template

    # Auto-generated Id of service handler Swagger specification file uploaded.
    # @return [ServiceSwaggerSpecId]
    attr_accessor :service_swagger_spec_id

    # Auto-generated Id of service handler Swagger specification file uploaded.
    # @return [Array[Workflow]]
    attr_accessor :workflows

    # Auto-generated Id of service handler Swagger specification file uploaded.
    # @return [Array[Workload]]
    attr_accessor :workloads

    # Dependencies of the service.
    # @return [Array[ServiceDependency]]
    attr_accessor :dependencies

    # Boundaries would have attributes csp, region and zoneId.
    # @return [Array[Boundary]]
    attr_accessor :boundaries

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['version'] = 'version'
      @_hash['metadata'] = 'metadata'
      @_hash['tags'] = 'tags'
      @_hash['categories'] = 'categories'
      @_hash['is_favourite'] = 'isFavourite'
      @_hash['is_deleted'] = 'isDeleted'
      @_hash['compatibility'] = 'compatibility'
      @_hash['resource'] = 'resource'
      @_hash['created_date'] = 'createdDate'
      @_hash['last_modified_date'] = 'lastModifiedDate'
      @_hash['created_by'] = 'createdBy'
      @_hash['last_modified_by'] = 'lastModifiedBy'
      @_hash['error'] = 'error'
      @_hash['error_response'] = 'errorResponse'
      @_hash['state'] = 'state'
      @_hash['status'] = 'status'
      @_hash['type'] = 'type'
      @_hash['service_handler_id'] = 'serviceHandlerId'
      @_hash['observability_template'] = 'observabilityTemplate'
      @_hash['service_swagger_spec_id'] = 'serviceSwaggerSpecId'
      @_hash['workflows'] = 'workflows'
      @_hash['workloads'] = 'workloads'
      @_hash['dependencies'] = 'dependencies'
      @_hash['boundaries'] = 'boundaries'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        description
        metadata
        tags
        categories
        is_favourite
        is_deleted
        compatibility
        resource
        created_date
        last_modified_date
        created_by
        last_modified_by
        error
        error_response
        state
        status
        type
        service_handler_id
        observability_template
        service_swagger_spec_id
        workflows
        workloads
        dependencies
        boundaries
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        description
        categories
        boundaries
      ]
    end

    def initialize(name = nil,
                   version = nil,
                   id = SKIP,
                   description = SKIP,
                   metadata = SKIP,
                   tags = SKIP,
                   categories = SKIP,
                   is_favourite = SKIP,
                   is_deleted = SKIP,
                   compatibility = SKIP,
                   resource = SKIP,
                   created_date = SKIP,
                   last_modified_date = SKIP,
                   created_by = SKIP,
                   last_modified_by = SKIP,
                   error = SKIP,
                   error_response = SKIP,
                   state = SKIP,
                   status = SKIP,
                   type = SKIP,
                   service_handler_id = SKIP,
                   observability_template = SKIP,
                   service_swagger_spec_id = SKIP,
                   workflows = SKIP,
                   workloads = SKIP,
                   dependencies = SKIP,
                   boundaries = SKIP)
      @id = id unless id == SKIP
      @name = name
      @description = description unless description == SKIP
      @version = version
      @metadata = metadata unless metadata == SKIP
      @tags = tags unless tags == SKIP
      @categories = categories unless categories == SKIP
      @is_favourite = is_favourite unless is_favourite == SKIP
      @is_deleted = is_deleted unless is_deleted == SKIP
      @compatibility = compatibility unless compatibility == SKIP
      @resource = resource unless resource == SKIP
      @created_date = created_date unless created_date == SKIP
      @last_modified_date = last_modified_date unless last_modified_date == SKIP
      @created_by = created_by unless created_by == SKIP
      @last_modified_by = last_modified_by unless last_modified_by == SKIP
      @error = error unless error == SKIP
      @error_response = error_response unless error_response == SKIP
      @state = state unless state == SKIP
      @status = status unless status == SKIP
      @type = type unless type == SKIP
      @service_handler_id = service_handler_id unless service_handler_id == SKIP
      @observability_template = observability_template unless observability_template == SKIP
      @service_swagger_spec_id = service_swagger_spec_id unless service_swagger_spec_id == SKIP
      @workflows = workflows unless workflows == SKIP
      @workloads = workloads unless workloads == SKIP
      @dependencies = dependencies unless dependencies == SKIP
      @boundaries = boundaries unless boundaries == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : nil
      version = hash.key?('version') ? hash['version'] : nil
      id = hash.key?('id') ? hash['id'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      # Parameter is an array, so we need to iterate through it
      metadata = nil
      unless hash['metadata'].nil?
        metadata = []
        hash['metadata'].each do |structure|
          metadata << (ServiceOnboardingAdditionalParams.from_hash(structure) if structure)
        end
      end

      metadata = SKIP unless hash.key?('metadata')
      # Parameter is an array, so we need to iterate through it
      tags = nil
      unless hash['tags'].nil?
        tags = []
        hash['tags'].each do |structure|
          tags << (ServiceTag.from_hash(structure) if structure)
        end
      end

      tags = SKIP unless hash.key?('tags')
      categories = hash.key?('categories') ? hash['categories'] : SKIP
      is_favourite = hash.key?('isFavourite') ? hash['isFavourite'] : SKIP
      is_deleted = hash.key?('isDeleted') ? hash['isDeleted'] : SKIP
      # Parameter is an array, so we need to iterate through it
      compatibility = nil
      unless hash['compatibility'].nil?
        compatibility = []
        hash['compatibility'].each do |structure|
          compatibility << (Compatibility.from_hash(structure) if structure)
        end
      end

      compatibility = SKIP unless hash.key?('compatibility')
      resource = ServiceResource.from_hash(hash['resource']) if hash['resource']
      created_date = if hash.key?('createdDate')
                       (DateTimeHelper.from_rfc3339(hash['createdDate']) if hash['createdDate'])
                     else
                       SKIP
                     end
      last_modified_date = if hash.key?('lastModifiedDate')
                             (DateTimeHelper.from_rfc3339(hash['lastModifiedDate']) if hash['lastModifiedDate'])
                           else
                             SKIP
                           end
      created_by = hash.key?('createdBy') ? hash['createdBy'] : SKIP
      last_modified_by =
        hash.key?('lastModifiedBy') ? hash['lastModifiedBy'] : SKIP
      error = ServiceError.from_hash(hash['error']) if hash['error']
      error_response = EdgeServiceOnboardingResult.from_hash(hash['errorResponse']) if
        hash['errorResponse']
      state = hash.key?('state') ? hash['state'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP
      service_handler_id = ServiceHandlerId.from_hash(hash['serviceHandlerId']) if
        hash['serviceHandlerId']
      observability_template = ObservabilityTemplate.from_hash(hash['observabilityTemplate']) if
        hash['observabilityTemplate']
      service_swagger_spec_id = ServiceSwaggerSpecId.from_hash(hash['serviceSwaggerSpecId']) if
        hash['serviceSwaggerSpecId']
      # Parameter is an array, so we need to iterate through it
      workflows = nil
      unless hash['workflows'].nil?
        workflows = []
        hash['workflows'].each do |structure|
          workflows << (Workflow.from_hash(structure) if structure)
        end
      end

      workflows = SKIP unless hash.key?('workflows')
      # Parameter is an array, so we need to iterate through it
      workloads = nil
      unless hash['workloads'].nil?
        workloads = []
        hash['workloads'].each do |structure|
          workloads << (Workload.from_hash(structure) if structure)
        end
      end

      workloads = SKIP unless hash.key?('workloads')
      # Parameter is an array, so we need to iterate through it
      dependencies = nil
      unless hash['dependencies'].nil?
        dependencies = []
        hash['dependencies'].each do |structure|
          dependencies << (ServiceDependency.from_hash(structure) if structure)
        end
      end

      dependencies = SKIP unless hash.key?('dependencies')
      # Parameter is an array, so we need to iterate through it
      boundaries = nil
      unless hash['boundaries'].nil?
        boundaries = []
        hash['boundaries'].each do |structure|
          boundaries << (Boundary.from_hash(structure) if structure)
        end
      end

      boundaries = SKIP unless hash.key?('boundaries')

      # Create object from extracted values.
      Service.new(name,
                  version,
                  id,
                  description,
                  metadata,
                  tags,
                  categories,
                  is_favourite,
                  is_deleted,
                  compatibility,
                  resource,
                  created_date,
                  last_modified_date,
                  created_by,
                  last_modified_by,
                  error,
                  error_response,
                  state,
                  status,
                  type,
                  service_handler_id,
                  observability_template,
                  service_swagger_spec_id,
                  workflows,
                  workloads,
                  dependencies,
                  boundaries)
    end

    def to_created_date
      DateTimeHelper.to_rfc3339(created_date)
    end

    def to_last_modified_date
      DateTimeHelper.to_rfc3339(last_modified_date)
    end
  end
end
