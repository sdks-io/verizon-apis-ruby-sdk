# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # ClusterMetadata Model.
  class ClusterMetadata < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Name of the cluster to be used.
    # @return [String]
    attr_accessor :name

    # Description of the cluster.
    # @return [String]
    attr_accessor :description

    # Description of the cluster.
    # @return [ClusterTypeEnum]
    attr_accessor :cluster_type

    # Description of the cluster.
    # @return [Cloud]
    attr_accessor :cloud

    # Description of the cluster.
    # @return [DataCenter]
    attr_accessor :data_center

    # Description of the cluster.
    # @return [Array[EdgeServiceLaunchParams]]
    attr_accessor :labels

    # Description of the cluster.
    # @return [ServiceLaunchClusterAdditionalParams]
    attr_accessor :ingress_ips

    # Description of the cluster.
    # @return [TrueClass | FalseClass]
    attr_accessor :upgrade_protection

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['cluster_type'] = 'clusterType'
      @_hash['cloud'] = 'cloud'
      @_hash['data_center'] = 'dataCenter'
      @_hash['labels'] = 'labels'
      @_hash['ingress_ips'] = 'ingressIps'
      @_hash['upgrade_protection'] = 'upgradeProtection'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        description
        cluster_type
        cloud
        data_center
        labels
        ingress_ips
        upgrade_protection
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = SKIP,
                   description = SKIP,
                   cluster_type = SKIP,
                   cloud = SKIP,
                   data_center = SKIP,
                   labels = SKIP,
                   ingress_ips = SKIP,
                   upgrade_protection = SKIP)
      @name = name unless name == SKIP
      @description = description unless description == SKIP
      @cluster_type = cluster_type unless cluster_type == SKIP
      @cloud = cloud unless cloud == SKIP
      @data_center = data_center unless data_center == SKIP
      @labels = labels unless labels == SKIP
      @ingress_ips = ingress_ips unless ingress_ips == SKIP
      @upgrade_protection = upgrade_protection unless upgrade_protection == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      cluster_type = hash.key?('clusterType') ? hash['clusterType'] : SKIP
      cloud = Cloud.from_hash(hash['cloud']) if hash['cloud']
      data_center = DataCenter.from_hash(hash['dataCenter']) if hash['dataCenter']
      # Parameter is an array, so we need to iterate through it
      labels = nil
      unless hash['labels'].nil?
        labels = []
        hash['labels'].each do |structure|
          labels << (EdgeServiceLaunchParams.from_hash(structure) if structure)
        end
      end

      labels = SKIP unless hash.key?('labels')
      ingress_ips = ServiceLaunchClusterAdditionalParams.from_hash(hash['ingressIps']) if
        hash['ingressIps']
      upgrade_protection =
        hash.key?('upgradeProtection') ? hash['upgradeProtection'] : SKIP

      # Create object from extracted values.
      ClusterMetadata.new(name,
                          description,
                          cluster_type,
                          cloud,
                          data_center,
                          labels,
                          ingress_ips,
                          upgrade_protection)
    end
  end
end
