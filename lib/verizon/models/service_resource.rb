# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Resource of the service.
  class ServiceResource < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Resource Base of the service.
    # @return [ResourceBase]
    attr_accessor :compute_resources

    # GPU required or not for onboarding service.
    # @return [TrueClass | FalseClass]
    attr_accessor :gpu_required

    # Resource Base of the service.
    # @return [ResourceBase]
    attr_accessor :gpu

    # Resource Base of the service.
    # @return [ResourceBase]
    attr_accessor :storage

    # Resource Base of the service.
    # @return [ResourceBase]
    attr_accessor :memory

    # Resource Base of the service.
    # @return [ResourceBase]
    attr_accessor :latency

    # Resource Base of the service.
    # @return [ResourceBase]
    attr_accessor :request_rate

    # Resource Base of the service.
    # @return [ResourceBase]
    attr_accessor :bandwidth

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['compute_resources'] = 'computeResources'
      @_hash['gpu_required'] = 'gpuRequired'
      @_hash['gpu'] = 'gpu'
      @_hash['storage'] = 'storage'
      @_hash['memory'] = 'memory'
      @_hash['latency'] = 'latency'
      @_hash['request_rate'] = 'requestRate'
      @_hash['bandwidth'] = 'bandwidth'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        compute_resources
        gpu_required
        gpu
        storage
        memory
        latency
        request_rate
        bandwidth
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(compute_resources = SKIP,
                   gpu_required = false,
                   gpu = SKIP,
                   storage = SKIP,
                   memory = SKIP,
                   latency = SKIP,
                   request_rate = SKIP,
                   bandwidth = SKIP)
      @compute_resources = compute_resources unless compute_resources == SKIP
      @gpu_required = gpu_required unless gpu_required == SKIP
      @gpu = gpu unless gpu == SKIP
      @storage = storage unless storage == SKIP
      @memory = memory unless memory == SKIP
      @latency = latency unless latency == SKIP
      @request_rate = request_rate unless request_rate == SKIP
      @bandwidth = bandwidth unless bandwidth == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      compute_resources = ResourceBase.from_hash(hash['computeResources']) if
        hash['computeResources']
      gpu_required = hash['gpuRequired'] ||= false
      gpu = ResourceBase.from_hash(hash['gpu']) if hash['gpu']
      storage = ResourceBase.from_hash(hash['storage']) if hash['storage']
      memory = ResourceBase.from_hash(hash['memory']) if hash['memory']
      latency = ResourceBase.from_hash(hash['latency']) if hash['latency']
      request_rate = ResourceBase.from_hash(hash['requestRate']) if hash['requestRate']
      bandwidth = ResourceBase.from_hash(hash['bandwidth']) if hash['bandwidth']

      # Create object from extracted values.
      ServiceResource.new(compute_resources,
                          gpu_required,
                          gpu,
                          storage,
                          memory,
                          latency,
                          request_rate,
                          bandwidth)
    end
  end
end
