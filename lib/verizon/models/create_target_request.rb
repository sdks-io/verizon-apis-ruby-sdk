# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Details of the target that you want to create.
  class CreateTargetRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the authenticating billing account, in the format
    # `{"billingaccountid":"1234567890-12345"}`.
    # @return [AccountIdentifier]
    attr_accessor :accountidentifier

    # The ID of the authenticating billing account.
    # @return [String]
    attr_accessor :billingaccountid

    # Identifies the resource kind. Targets are ts.target.
    # @return [String]
    attr_accessor :kind

    # The endpoint for notifications or data streams. The format depends on the
    # selected `addressscheme`.<br />`streamrest` requires a `host:port` value
    # <br />`streamawsiot` requres a valid ARN.
    # @return [String]
    attr_accessor :address

    # The transport format. Valid values are: <br />streamawsiot - streamed data
    # to an AWS account <br />streamrest - streamed REST data to a defined
    # endpoint.
    # @return [String]
    attr_accessor :addressscheme

    # The transport format. Valid values are: <br />streamawsiot - streamed data
    # to an AWS account <br />streamrest - streamed REST data to a defined
    # endpoint.
    # @return [CreateTargetRequestFields]
    attr_accessor :fields

    # Descriptive information about the target.
    # @return [String]
    attr_accessor :description

    # Security identification string created by a POST /targets/actions/newextid
    # request.
    # @return [String]
    attr_accessor :externalid

    # Name of the target.
    # @return [String]
    attr_accessor :name

    # AWS region value.
    # @return [String]
    attr_accessor :region

    # OAuth 2.0 bearer token.
    # @return [String]
    attr_accessor :key1

    # OAuth 2 token and refresh token for TS to stream events to Target.
    # @return [TargetAuthentication]
    attr_accessor :oauth

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['accountidentifier'] = 'accountidentifier'
      @_hash['billingaccountid'] = 'billingaccountid'
      @_hash['kind'] = 'kind'
      @_hash['address'] = 'address'
      @_hash['addressscheme'] = 'addressscheme'
      @_hash['fields'] = 'fields'
      @_hash['description'] = 'description'
      @_hash['externalid'] = 'externalid'
      @_hash['name'] = 'name'
      @_hash['region'] = 'region'
      @_hash['key1'] = 'key1'
      @_hash['oauth'] = 'oauth'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        accountidentifier
        billingaccountid
        kind
        address
        addressscheme
        fields
        description
        externalid
        name
        region
        key1
        oauth
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(accountidentifier = SKIP,
                   billingaccountid = SKIP,
                   kind = SKIP,
                   address = SKIP,
                   addressscheme = SKIP,
                   fields = SKIP,
                   description = SKIP,
                   externalid = SKIP,
                   name = SKIP,
                   region = SKIP,
                   key1 = SKIP,
                   oauth = SKIP)
      @accountidentifier = accountidentifier unless accountidentifier == SKIP
      @billingaccountid = billingaccountid unless billingaccountid == SKIP
      @kind = kind unless kind == SKIP
      @address = address unless address == SKIP
      @addressscheme = addressscheme unless addressscheme == SKIP
      @fields = fields unless fields == SKIP
      @description = description unless description == SKIP
      @externalid = externalid unless externalid == SKIP
      @name = name unless name == SKIP
      @region = region unless region == SKIP
      @key1 = key1 unless key1 == SKIP
      @oauth = oauth unless oauth == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      accountidentifier = AccountIdentifier.from_hash(hash['accountidentifier']) if
        hash['accountidentifier']
      billingaccountid =
        hash.key?('billingaccountid') ? hash['billingaccountid'] : SKIP
      kind = hash.key?('kind') ? hash['kind'] : SKIP
      address = hash.key?('address') ? hash['address'] : SKIP
      addressscheme = hash.key?('addressscheme') ? hash['addressscheme'] : SKIP
      fields = CreateTargetRequestFields.from_hash(hash['fields']) if hash['fields']
      description = hash.key?('description') ? hash['description'] : SKIP
      externalid = hash.key?('externalid') ? hash['externalid'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      region = hash.key?('region') ? hash['region'] : SKIP
      key1 = hash.key?('key1') ? hash['key1'] : SKIP
      oauth = TargetAuthentication.from_hash(hash['oauth']) if hash['oauth']

      # Create object from extracted values.
      CreateTargetRequest.new(accountidentifier,
                              billingaccountid,
                              kind,
                              address,
                              addressscheme,
                              fields,
                              description,
                              externalid,
                              name,
                              region,
                              key1,
                              oauth)
    end
  end
end
