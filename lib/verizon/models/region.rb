# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Information representing a certain geographical or logical area where MEC
  # resources and services are provided.
  class Region < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The unique identifier of the region.
    # @return [String]
    attr_accessor :region_id

    # A relevant and identifiable region name.
    # @return [String]
    attr_accessor :name

    # A two-character alpha code for a country, based on ISO 3166-1 alpha-2.
    # This is future functionality, so the value returned is 'null'.
    # @return [String]
    attr_accessor :country_code

    # The metropolitan area or 'City' value.  This is future functionality, so
    # the value returned is 'null'.
    # @return [String]
    attr_accessor :metro

    # This is a sub-set of 'City' and is similar to 'Zone'. This is future
    # functionality, so the value returned is 'null'.
    # @return [String]
    attr_accessor :area

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['region_id'] = 'regionId'
      @_hash['name'] = 'name'
      @_hash['country_code'] = 'countryCode'
      @_hash['metro'] = 'metro'
      @_hash['area'] = 'area'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        region_id
        name
        country_code
        metro
        area
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        region_id
        name
        country_code
        metro
        area
      ]
    end

    def initialize(region_id = SKIP,
                   name = SKIP,
                   country_code = SKIP,
                   metro = SKIP,
                   area = SKIP)
      @region_id = region_id unless region_id == SKIP
      @name = name unless name == SKIP
      @country_code = country_code unless country_code == SKIP
      @metro = metro unless metro == SKIP
      @area = area unless area == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      region_id = hash.key?('regionId') ? hash['regionId'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      country_code = hash.key?('countryCode') ? hash['countryCode'] : SKIP
      metro = hash.key?('metro') ? hash['metro'] : SKIP
      area = hash.key?('area') ? hash['area'] : SKIP

      # Create object from extracted values.
      Region.new(region_id,
                 name,
                 country_code,
                 metro,
                 area)
    end
  end
end
