# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # RetrieveMonitorsRequest Model.
  class RetrieveMonitorsRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name of a billing account.
    # @return [String]
    attr_accessor :account_name

    # The devices for which you want to restore service, specified by device
    # identifier.
    # @return [Array[AccountDeviceList]]
    attr_accessor :devices

    # The name of a billing account.
    # @return [String]
    attr_accessor :monitor_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['devices'] = 'devices'
      @_hash['monitor_type'] = 'monitorType'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        monitor_type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name = nil,
                   devices = nil,
                   monitor_type = SKIP)
      @account_name = account_name
      @devices = devices
      @monitor_type = monitor_type unless monitor_type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : nil
      # Parameter is an array, so we need to iterate through it
      devices = nil
      unless hash['devices'].nil?
        devices = []
        hash['devices'].each do |structure|
          devices << (AccountDeviceList.from_hash(structure) if structure)
        end
      end

      devices = nil unless hash.key?('devices')
      monitor_type = hash.key?('monitorType') ? hash['monitorType'] : SKIP

      # Create object from extracted values.
      RetrieveMonitorsRequest.new(account_name,
                                  devices,
                                  monitor_type)
    end
  end
end
