# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Includes callback listeners that were registered through the Connectivity
  # Management API.
  class ConnectivityManagementCallback < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name of the billing account for which callback messages will be sent.
    # @return [String]
    attr_accessor :account_name

    # The password defined when a URL was registered for the callback service,
    # or an empty string if no password was defined.
    # @return [String]
    attr_accessor :password

    # The name of the callback service, which identifies the type and format of
    # messages that will be sent to the registered URL.
    # @return [String]
    attr_accessor :service_name

    # The address of the callback listening service where the ThingSpace
    # Platform will send callback messages for the service type.
    # @return [String]
    attr_accessor :url

    # The username defined when a URL was registered for the callback service,
    # or an empty string if no username was defined.
    # @return [String]
    attr_accessor :username

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['password'] = 'password'
      @_hash['service_name'] = 'serviceName'
      @_hash['url'] = 'url'
      @_hash['username'] = 'username'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_name
        password
        service_name
        url
        username
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name = SKIP,
                   password = SKIP,
                   service_name = SKIP,
                   url = SKIP,
                   username = SKIP)
      @account_name = account_name unless account_name == SKIP
      @password = password unless password == SKIP
      @service_name = service_name unless service_name == SKIP
      @url = url unless url == SKIP
      @username = username unless username == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP
      password = hash.key?('password') ? hash['password'] : SKIP
      service_name = hash.key?('serviceName') ? hash['serviceName'] : SKIP
      url = hash.key?('url') ? hash['url'] : SKIP
      username = hash.key?('username') ? hash['username'] : SKIP

      # Create object from extracted values.
      ConnectivityManagementCallback.new(account_name,
                                         password,
                                         service_name,
                                         url,
                                         username)
    end
  end
end
