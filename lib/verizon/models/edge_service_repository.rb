# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # EdgeServiceRepository Model.
  class EdgeServiceRepository < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [Revision]
    attr_accessor :revision

    # TODO: Write general description for this method
    # @return [VendorInformation]
    attr_accessor :vendor_information

    # TODO: Write general description for this method
    # @return [RepositoryResTypeEnum]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tag

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :endpoint

    # TODO: Write general description for this method
    # @return [ReacheabilityEnum]
    attr_accessor :reacheability

    # Required if your repository uses a private certificate authencation.Please
    # provide ur CA certificat in PEM format.
    # @return [String]
    attr_accessor :ca_certificate

    # Required if your repository uses a private certificate authencation.Please
    # provide ur CA certificat in PEM format.
    # @return [Array[String]]
    attr_accessor :agents

    # Required if your repository uses a private certificate authencation.Please
    # provide ur CA certificat in PEM format.
    # @return [TrueClass | FalseClass]
    attr_accessor :ssl_disabled

    # Required if your repository uses a private certificate authencation.Please
    # provide ur CA certificat in PEM format.
    # @return [CredentialsTypeEnum]
    attr_accessor :credentials_type

    # Required if your repository uses a private certificate authencation.Please
    # provide ur CA certificat in PEM format.
    # @return [Credential]
    attr_accessor :credentials

    # SSH Private Key in PEM format.
    # @return [String]
    attr_accessor :ssh_key

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['revision'] = 'revision'
      @_hash['vendor_information'] = 'vendorInformation'
      @_hash['type'] = 'type'
      @_hash['tag'] = 'tag'
      @_hash['endpoint'] = 'endpoint'
      @_hash['reacheability'] = 'reacheability'
      @_hash['ca_certificate'] = 'CACertificate'
      @_hash['agents'] = 'Agents'
      @_hash['ssl_disabled'] = 'sslDisabled'
      @_hash['credentials_type'] = 'credentialsType'
      @_hash['credentials'] = 'credentials'
      @_hash['ssh_key'] = 'sshKey'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        description
        revision
        vendor_information
        tag
        ca_certificate
        agents
        ssl_disabled
        credentials_type
        credentials
        ssh_key
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = nil,
                   type = nil,
                   endpoint = nil,
                   reacheability = nil,
                   description = SKIP,
                   revision = SKIP,
                   vendor_information = SKIP,
                   tag = SKIP,
                   ca_certificate = SKIP,
                   agents = SKIP,
                   ssl_disabled = SKIP,
                   credentials_type = SKIP,
                   credentials = SKIP,
                   ssh_key = SKIP)
      @name = name
      @description = description unless description == SKIP
      @revision = revision unless revision == SKIP
      @vendor_information = vendor_information unless vendor_information == SKIP
      @type = type
      @tag = tag unless tag == SKIP
      @endpoint = endpoint
      @reacheability = reacheability
      @ca_certificate = ca_certificate unless ca_certificate == SKIP
      @agents = agents unless agents == SKIP
      @ssl_disabled = ssl_disabled unless ssl_disabled == SKIP
      @credentials_type = credentials_type unless credentials_type == SKIP
      @credentials = credentials unless credentials == SKIP
      @ssh_key = ssh_key unless ssh_key == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : nil
      type = hash.key?('type') ? hash['type'] : nil
      endpoint = hash.key?('endpoint') ? hash['endpoint'] : nil
      reacheability = hash.key?('reacheability') ? hash['reacheability'] : nil
      description = hash.key?('description') ? hash['description'] : SKIP
      revision = Revision.from_hash(hash['revision']) if hash['revision']
      vendor_information = VendorInformation.from_hash(hash['vendorInformation']) if
        hash['vendorInformation']
      tag = hash.key?('tag') ? hash['tag'] : SKIP
      ca_certificate = hash.key?('CACertificate') ? hash['CACertificate'] : SKIP
      agents = hash.key?('Agents') ? hash['Agents'] : SKIP
      ssl_disabled = hash.key?('sslDisabled') ? hash['sslDisabled'] : SKIP
      credentials_type =
        hash.key?('credentialsType') ? hash['credentialsType'] : SKIP
      credentials = Credential.from_hash(hash['credentials']) if hash['credentials']
      ssh_key = hash.key?('sshKey') ? hash['sshKey'] : SKIP

      # Create object from extracted values.
      EdgeServiceRepository.new(name,
                                type,
                                endpoint,
                                reacheability,
                                description,
                                revision,
                                vendor_information,
                                tag,
                                ca_certificate,
                                agents,
                                ssl_disabled,
                                credentials_type,
                                credentials,
                                ssh_key)
    end
  end
end
