# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # ClusterStatus Model.
  class ClusterStatus < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Array[ConditionItem]]
    attr_accessor :conditions

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :token

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :published_blueprint

    # TODO: Write general description for this method
    # @return [Array[NodeStatusItem]]
    attr_accessor :nodes

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :system_task_count

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :custom_task_count

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :auxiliary_task_count

    # TODO: Write general description for this method
    # @return [Array[StatusProjectItem]]
    attr_accessor :projects

    # TODO: Write general description for this method
    # @return [ClusterStatusExtra]
    attr_accessor :extra

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['conditions'] = 'conditions'
      @_hash['token'] = 'token'
      @_hash['published_blueprint'] = 'publishedBlueprint'
      @_hash['nodes'] = 'nodes'
      @_hash['system_task_count'] = 'systemTaskCount'
      @_hash['custom_task_count'] = 'customTaskCount'
      @_hash['auxiliary_task_count'] = 'auxiliaryTaskCount'
      @_hash['projects'] = 'projects'
      @_hash['extra'] = 'extra'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        conditions
        token
        published_blueprint
        nodes
        system_task_count
        custom_task_count
        auxiliary_task_count
        projects
        extra
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(conditions = SKIP,
                   token = SKIP,
                   published_blueprint = SKIP,
                   nodes = SKIP,
                   system_task_count = SKIP,
                   custom_task_count = SKIP,
                   auxiliary_task_count = SKIP,
                   projects = SKIP,
                   extra = SKIP)
      @conditions = conditions unless conditions == SKIP
      @token = token unless token == SKIP
      @published_blueprint = published_blueprint unless published_blueprint == SKIP
      @nodes = nodes unless nodes == SKIP
      @system_task_count = system_task_count unless system_task_count == SKIP
      @custom_task_count = custom_task_count unless custom_task_count == SKIP
      @auxiliary_task_count = auxiliary_task_count unless auxiliary_task_count == SKIP
      @projects = projects unless projects == SKIP
      @extra = extra unless extra == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      conditions = nil
      unless hash['conditions'].nil?
        conditions = []
        hash['conditions'].each do |structure|
          conditions << (ConditionItem.from_hash(structure) if structure)
        end
      end

      conditions = SKIP unless hash.key?('conditions')
      token = hash.key?('token') ? hash['token'] : SKIP
      published_blueprint =
        hash.key?('publishedBlueprint') ? hash['publishedBlueprint'] : SKIP
      # Parameter is an array, so we need to iterate through it
      nodes = nil
      unless hash['nodes'].nil?
        nodes = []
        hash['nodes'].each do |structure|
          nodes << (NodeStatusItem.from_hash(structure) if structure)
        end
      end

      nodes = SKIP unless hash.key?('nodes')
      system_task_count =
        hash.key?('systemTaskCount') ? hash['systemTaskCount'] : SKIP
      custom_task_count =
        hash.key?('customTaskCount') ? hash['customTaskCount'] : SKIP
      auxiliary_task_count =
        hash.key?('auxiliaryTaskCount') ? hash['auxiliaryTaskCount'] : SKIP
      # Parameter is an array, so we need to iterate through it
      projects = nil
      unless hash['projects'].nil?
        projects = []
        hash['projects'].each do |structure|
          projects << (StatusProjectItem.from_hash(structure) if structure)
        end
      end

      projects = SKIP unless hash.key?('projects')
      extra = ClusterStatusExtra.from_hash(hash['extra']) if hash['extra']

      # Create object from extracted values.
      ClusterStatus.new(conditions,
                        token,
                        published_blueprint,
                        nodes,
                        system_task_count,
                        custom_task_count,
                        auxiliary_task_count,
                        projects,
                        extra)
    end
  end
end
