# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Make changes to a device group, including changing the name and description,
  # and adding or removing devices.
  class DeviceGroupUpdateRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Zero or more devices to add to the device group, specified by device ID.
    # The devices will be removed from their current device groups. You can use
    # POST /devices/actions/list to get a list of all devices in the account.
    # @return [Array[DeviceId]]
    attr_accessor :devices_to_add

    # Zero or more devices to remove from the device group, specified by device
    # ID. The devices will be added to the default device group.
    # @return [Array[DeviceId]]
    attr_accessor :devices_to_remove

    # A new description for the device group. Do not include this parameter to
    # leave the group description unchanged.
    # @return [String]
    attr_accessor :new_group_description

    # A new name for the device group. Do not include this parameter if you want
    # to leave the group name unchanged.
    # @return [String]
    attr_accessor :new_group_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['devices_to_add'] = 'devicesToAdd'
      @_hash['devices_to_remove'] = 'devicesToRemove'
      @_hash['new_group_description'] = 'newGroupDescription'
      @_hash['new_group_name'] = 'newGroupName'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        devices_to_add
        devices_to_remove
        new_group_description
        new_group_name
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(devices_to_add = SKIP,
                   devices_to_remove = SKIP,
                   new_group_description = SKIP,
                   new_group_name = SKIP)
      @devices_to_add = devices_to_add unless devices_to_add == SKIP
      @devices_to_remove = devices_to_remove unless devices_to_remove == SKIP
      @new_group_description = new_group_description unless new_group_description == SKIP
      @new_group_name = new_group_name unless new_group_name == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      devices_to_add = nil
      unless hash['devicesToAdd'].nil?
        devices_to_add = []
        hash['devicesToAdd'].each do |structure|
          devices_to_add << (DeviceId.from_hash(structure) if structure)
        end
      end

      devices_to_add = SKIP unless hash.key?('devicesToAdd')
      # Parameter is an array, so we need to iterate through it
      devices_to_remove = nil
      unless hash['devicesToRemove'].nil?
        devices_to_remove = []
        hash['devicesToRemove'].each do |structure|
          devices_to_remove << (DeviceId.from_hash(structure) if structure)
        end
      end

      devices_to_remove = SKIP unless hash.key?('devicesToRemove')
      new_group_description =
        hash.key?('newGroupDescription') ? hash['newGroupDescription'] : SKIP
      new_group_name = hash.key?('newGroupName') ? hash['newGroupName'] : SKIP

      # Create object from extracted values.
      DeviceGroupUpdateRequest.new(devices_to_add,
                                   devices_to_remove,
                                   new_group_description,
                                   new_group_name)
    end
  end
end
