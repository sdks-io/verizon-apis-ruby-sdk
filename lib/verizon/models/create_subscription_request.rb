# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The details of the subscription that you want to create.
  class CreateSubscriptionRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the authenticating billing account, in the format
    # `{"billingaccountid":"1234567890-12345"}`.
    # @return [AccountIdentifier]
    attr_accessor :accountidentifier

    # Descriptive information about the subscription.
    # @return [String]
    attr_accessor :description

    # Enable or disable the subscription. A disabled subscription will not send
    # any data.
    # @return [TrueClass | FalseClass]
    attr_accessor :disabled

    # The address to which any error reports should be delivered.
    # @return [String]
    attr_accessor :email

    # String containing a $filter object with a property and value to filter out
    # non-matching events.
    # @return [String]
    attr_accessor :filter

    # String containing a $filter object with a property and value to filter out
    # non-matching events.
    # @return [String]
    attr_accessor :billingaccountid

    # The type of event data to send via this subscription. This will be
    # `ts.event` in most cases. Other event types are `ts.event.diagnostics` for
    # device diagnostic data, `ts.event.configuration` for device configuration
    # events, or `ts.event.security`. Note that the device ThingSpace client
    # must support sending specific event types for anything other than
    # `ts.event`.
    # @return [String]
    attr_accessor :streamkind

    # The ID of the target resource to be used when dispatching events. The
    # corresponding target should have a “stream” addressscheme.
    # @return [String]
    attr_accessor :targetid

    # Name of the subscription.
    # @return [String]
    attr_accessor :name

    # Setting this value to `false` prevents the data returned from being
    # aggregated and makes the data easier to parse.
    # @return [TrueClass | FalseClass]
    attr_accessor :allowaggregation

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['accountidentifier'] = 'accountidentifier'
      @_hash['description'] = 'description'
      @_hash['disabled'] = 'disabled'
      @_hash['email'] = 'email'
      @_hash['filter'] = 'filter'
      @_hash['billingaccountid'] = 'billingaccountid'
      @_hash['streamkind'] = 'streamkind'
      @_hash['targetid'] = 'targetid'
      @_hash['name'] = 'name'
      @_hash['allowaggregation'] = 'allowaggregation'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        accountidentifier
        description
        disabled
        email
        filter
        billingaccountid
        streamkind
        targetid
        name
        allowaggregation
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(accountidentifier = SKIP,
                   description = SKIP,
                   disabled = SKIP,
                   email = SKIP,
                   filter = SKIP,
                   billingaccountid = SKIP,
                   streamkind = SKIP,
                   targetid = SKIP,
                   name = SKIP,
                   allowaggregation = SKIP)
      @accountidentifier = accountidentifier unless accountidentifier == SKIP
      @description = description unless description == SKIP
      @disabled = disabled unless disabled == SKIP
      @email = email unless email == SKIP
      @filter = filter unless filter == SKIP
      @billingaccountid = billingaccountid unless billingaccountid == SKIP
      @streamkind = streamkind unless streamkind == SKIP
      @targetid = targetid unless targetid == SKIP
      @name = name unless name == SKIP
      @allowaggregation = allowaggregation unless allowaggregation == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      accountidentifier = AccountIdentifier.from_hash(hash['accountidentifier']) if
        hash['accountidentifier']
      description = hash.key?('description') ? hash['description'] : SKIP
      disabled = hash.key?('disabled') ? hash['disabled'] : SKIP
      email = hash.key?('email') ? hash['email'] : SKIP
      filter = hash.key?('filter') ? hash['filter'] : SKIP
      billingaccountid =
        hash.key?('billingaccountid') ? hash['billingaccountid'] : SKIP
      streamkind = hash.key?('streamkind') ? hash['streamkind'] : SKIP
      targetid = hash.key?('targetid') ? hash['targetid'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      allowaggregation =
        hash.key?('allowaggregation') ? hash['allowaggregation'] : SKIP

      # Create object from extracted values.
      CreateSubscriptionRequest.new(accountidentifier,
                                    description,
                                    disabled,
                                    email,
                                    filter,
                                    billingaccountid,
                                    streamkind,
                                    targetid,
                                    name,
                                    allowaggregation)
    end
  end
end
