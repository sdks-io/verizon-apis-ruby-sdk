# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # ConditionItem Model.
  class ConditionItem < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_updated

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :reason

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['type'] = 'type'
      @_hash['status'] = 'status'
      @_hash['last_updated'] = 'lastUpdated'
      @_hash['reason'] = 'reason'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        type
        status
        last_updated
        reason
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(type = SKIP,
                   status = SKIP,
                   last_updated = SKIP,
                   reason = SKIP)
      @type = type unless type == SKIP
      @status = status unless status == SKIP
      @last_updated = last_updated unless last_updated == SKIP
      @reason = reason unless reason == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      type = hash.key?('type') ? hash['type'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      last_updated = hash.key?('lastUpdated') ? hash['lastUpdated'] : SKIP
      reason = hash.key?('reason') ? hash['reason'] : SKIP

      # Create object from extracted values.
      ConditionItem.new(type,
                        status,
                        last_updated,
                        reason)
    end
  end
end
