# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Search by device id.
  class DeviceIdSearch < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The string appears anywhere in the identifer.
    # @return [String]
    attr_accessor :contains

    # The identifer must start with the specified string.
    # @return [String]
    attr_accessor :startswith

    # The identifier must end with the specified string.
    # @return [String]
    attr_accessor :endswith

    # The type of the device identifier. Valid types of identifiers are:ESN
    # (decimal),EID,ICCID (up to 20 digits),IMEI (up to 16 digits),MDN,MEID
    # (hexadecimal),MSISDN.
    # @return [String]
    attr_accessor :kind

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['contains'] = 'contains'
      @_hash['startswith'] = 'startswith'
      @_hash['endswith'] = 'endswith'
      @_hash['kind'] = 'kind'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        startswith
        endswith
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(contains = nil, kind = nil, startswith = SKIP,
                   endswith = SKIP)
      @contains = contains
      @startswith = startswith unless startswith == SKIP
      @endswith = endswith unless endswith == SKIP
      @kind = kind
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      contains = hash.key?('contains') ? hash['contains'] : nil
      kind = hash.key?('kind') ? hash['kind'] : nil
      startswith = hash.key?('startswith') ? hash['startswith'] : SKIP
      endswith = hash.key?('endswith') ? hash['endswith'] : SKIP

      # Create object from extracted values.
      DeviceIdSearch.new(contains,
                         kind,
                         startswith,
                         endswith)
    end
  end
end
