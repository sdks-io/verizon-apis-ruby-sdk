# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Changes the provisioning state of one or more devices to a specified
  # customer-defined service and state.
  class GoToStateRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Up to 10,000 devices that you want to push to a different state, specified
    # by device identifier.
    # @return [Array[AccountDeviceList]]
    attr_accessor :devices

    # Specify the kind of the device identifier, the type of match, and the
    # string that you want to match.
    # @return [DeviceFilter]
    attr_accessor :filter

    # The name of a customer-defined service to push the devices to.
    # @return [String]
    attr_accessor :service_name

    # The name of a customer-defined stage state to push the devices to.
    # @return [String]
    attr_accessor :state_name

    # The service plan code that you want to assign to all specified devices in
    # the new state.
    # @return [String]
    attr_accessor :service_plan

    # The Zip code of the location where the line of service will primarily be
    # used, or a Zip code that you have been told to use with these devices. For
    # accounts that are configured for geographic numbering, this is the ZIP
    # code from which the MDN will be derived.
    # @return [String]
    attr_accessor :mdn_zip_code

    # The pool from which your device IP addresses will be derived if the
    # service or state change requires new IP addresses.If you do not include
    # this element, the default pool will be used.
    # @return [String]
    attr_accessor :carrier_ip_pool_name

    # For devices with static IP addresses on the public network, this specifies
    # whether the devices have general access to the Internet. Valid values are
    # “restricted” or “unrestricted”.
    # @return [String]
    attr_accessor :public_ip_restriction

    # The Stock Keeping Unit (SKU) number of a 4G device type with an embedded
    # SIM. Can be used with ICCID or EID device identifiers in lieu of an IMEI
    # when activating 4G devices. The SkuNumber will be used with all devices in
    # the request, so all devices must be of the same type.
    # @return [String]
    attr_accessor :sku_number

    # The names and values of any custom fields that you want to set for the
    # devices.
    # @return [Array[CustomFields]]
    attr_accessor :custom_fields

    # The name of a device group that the devices should be added to.
    # @return [String]
    attr_accessor :group_name

    # The customer name and the address of the device's primary place of use.
    # Leave these fields empty to use the account profile address as the primary
    # place of use. These values will be applied to all devices in the
    # request.If the account is enabled for non-geographic MDNs and the device
    # supports it, the primaryPlaceOfUse address will also be used to derive the
    # MDN for the device.
    # @return [PlaceOfUse]
    attr_accessor :primary_place_of_use

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['devices'] = 'devices'
      @_hash['filter'] = 'filter'
      @_hash['service_name'] = 'serviceName'
      @_hash['state_name'] = 'stateName'
      @_hash['service_plan'] = 'servicePlan'
      @_hash['mdn_zip_code'] = 'mdnZipCode'
      @_hash['carrier_ip_pool_name'] = 'carrierIpPoolName'
      @_hash['public_ip_restriction'] = 'publicIpRestriction'
      @_hash['sku_number'] = 'skuNumber'
      @_hash['custom_fields'] = 'customFields'
      @_hash['group_name'] = 'groupName'
      @_hash['primary_place_of_use'] = 'primaryPlaceOfUse'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        devices
        filter
        service_name
        state_name
        service_plan
        mdn_zip_code
        carrier_ip_pool_name
        public_ip_restriction
        sku_number
        custom_fields
        group_name
        primary_place_of_use
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(devices = SKIP,
                   filter = SKIP,
                   service_name = SKIP,
                   state_name = SKIP,
                   service_plan = SKIP,
                   mdn_zip_code = SKIP,
                   carrier_ip_pool_name = SKIP,
                   public_ip_restriction = SKIP,
                   sku_number = SKIP,
                   custom_fields = SKIP,
                   group_name = SKIP,
                   primary_place_of_use = SKIP)
      @devices = devices unless devices == SKIP
      @filter = filter unless filter == SKIP
      @service_name = service_name unless service_name == SKIP
      @state_name = state_name unless state_name == SKIP
      @service_plan = service_plan unless service_plan == SKIP
      @mdn_zip_code = mdn_zip_code unless mdn_zip_code == SKIP
      @carrier_ip_pool_name = carrier_ip_pool_name unless carrier_ip_pool_name == SKIP
      @public_ip_restriction = public_ip_restriction unless public_ip_restriction == SKIP
      @sku_number = sku_number unless sku_number == SKIP
      @custom_fields = custom_fields unless custom_fields == SKIP
      @group_name = group_name unless group_name == SKIP
      @primary_place_of_use = primary_place_of_use unless primary_place_of_use == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      devices = nil
      unless hash['devices'].nil?
        devices = []
        hash['devices'].each do |structure|
          devices << (AccountDeviceList.from_hash(structure) if structure)
        end
      end

      devices = SKIP unless hash.key?('devices')
      filter = DeviceFilter.from_hash(hash['filter']) if hash['filter']
      service_name = hash.key?('serviceName') ? hash['serviceName'] : SKIP
      state_name = hash.key?('stateName') ? hash['stateName'] : SKIP
      service_plan = hash.key?('servicePlan') ? hash['servicePlan'] : SKIP
      mdn_zip_code = hash.key?('mdnZipCode') ? hash['mdnZipCode'] : SKIP
      carrier_ip_pool_name =
        hash.key?('carrierIpPoolName') ? hash['carrierIpPoolName'] : SKIP
      public_ip_restriction =
        hash.key?('publicIpRestriction') ? hash['publicIpRestriction'] : SKIP
      sku_number = hash.key?('skuNumber') ? hash['skuNumber'] : SKIP
      # Parameter is an array, so we need to iterate through it
      custom_fields = nil
      unless hash['customFields'].nil?
        custom_fields = []
        hash['customFields'].each do |structure|
          custom_fields << (CustomFields.from_hash(structure) if structure)
        end
      end

      custom_fields = SKIP unless hash.key?('customFields')
      group_name = hash.key?('groupName') ? hash['groupName'] : SKIP
      primary_place_of_use = PlaceOfUse.from_hash(hash['primaryPlaceOfUse']) if
        hash['primaryPlaceOfUse']

      # Create object from extracted values.
      GoToStateRequest.new(devices,
                           filter,
                           service_name,
                           state_name,
                           service_plan,
                           mdn_zip_code,
                           carrier_ip_pool_name,
                           public_ip_restriction,
                           sku_number,
                           custom_fields,
                           group_name,
                           primary_place_of_use)
    end
  end
end
