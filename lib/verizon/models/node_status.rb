# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # NodeStatus Model.
  class NodeStatus < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [Array[StatusConditionItem]]
    attr_accessor :conditions

    # TODO: Write general description for this method
    # @return [NodeStatusInfo]
    attr_accessor :node_info

    # TODO: Write general description for this method
    # @return [NodeStatusCapacity]
    attr_accessor :capacity

    # TODO: Write general description for this method
    # @return [NodeStatusAllocatable]
    attr_accessor :allocatable

    # TODO: Write general description for this method
    # @return [NodeStatusAllocated]
    attr_accessor :allocated

    # TODO: Write general description for this method
    # @return [Array[IP]]
    attr_accessor :ips

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['state'] = 'state'
      @_hash['conditions'] = 'conditions'
      @_hash['node_info'] = 'nodeInfo'
      @_hash['capacity'] = 'capacity'
      @_hash['allocatable'] = 'allocatable'
      @_hash['allocated'] = 'allocated'
      @_hash['ips'] = 'ips'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        state
        conditions
        node_info
        capacity
        allocatable
        allocated
        ips
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(state = SKIP,
                   conditions = SKIP,
                   node_info = SKIP,
                   capacity = SKIP,
                   allocatable = SKIP,
                   allocated = SKIP,
                   ips = SKIP)
      @state = state unless state == SKIP
      @conditions = conditions unless conditions == SKIP
      @node_info = node_info unless node_info == SKIP
      @capacity = capacity unless capacity == SKIP
      @allocatable = allocatable unless allocatable == SKIP
      @allocated = allocated unless allocated == SKIP
      @ips = ips unless ips == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      state = hash.key?('state') ? hash['state'] : SKIP
      # Parameter is an array, so we need to iterate through it
      conditions = nil
      unless hash['conditions'].nil?
        conditions = []
        hash['conditions'].each do |structure|
          conditions << (StatusConditionItem.from_hash(structure) if structure)
        end
      end

      conditions = SKIP unless hash.key?('conditions')
      node_info = NodeStatusInfo.from_hash(hash['nodeInfo']) if hash['nodeInfo']
      capacity = NodeStatusCapacity.from_hash(hash['capacity']) if hash['capacity']
      allocatable = NodeStatusAllocatable.from_hash(hash['allocatable']) if hash['allocatable']
      allocated = NodeStatusAllocated.from_hash(hash['allocated']) if hash['allocated']
      # Parameter is an array, so we need to iterate through it
      ips = nil
      unless hash['ips'].nil?
        ips = []
        hash['ips'].each do |structure|
          ips << (IP.from_hash(structure) if structure)
        end
      end

      ips = SKIP unless hash.key?('ips')

      # Create object from extracted values.
      NodeStatus.new(state,
                     conditions,
                     node_info,
                     capacity,
                     allocatable,
                     allocated,
                     ips)
    end
  end
end
