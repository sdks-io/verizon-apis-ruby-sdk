# verizon_thing_space_quality_of_service_api_endpoints
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module VerizonThingSpaceQualityOfServiceApiEndpoints
  # An enum for SDK environments.
  class Environment
    ENVIRONMENT = [
      PRODUCTION = 'Production'.freeze,
      STAGING = 'Staging'.freeze
    ].freeze
  end

  # An enum for API servers.
  class Server
    SERVER = [
      OAUTH_SERVER = 'OAuth Server'.freeze,
      THINGSPACE = 'Thingspace'.freeze
    ].freeze
  end

  # All configuration including auth info and base URI for the API access
  # are configured in this class.
  class Configuration < CoreLibrary::HttpClientConfiguration
    # The attribute readers for properties.
    attr_reader :environment, :thingspace_oauth_credentials,
                :vz_m2m_session_token_credentials, :vz_m2_m_token

    class << self
      attr_reader :environments
    end

    def initialize(
      connection: nil, adapter: :net_http_persistent, timeout: 60,
      max_retries: 0, retry_interval: 1, backoff_factor: 2,
      retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
      retry_methods: %i[get put], http_callback: nil,
      environment: Environment::PRODUCTION, thingspace_oauth_credentials: nil,
      vz_m2m_session_token_credentials: nil, vz_m2_m_token: 'TODO: Replace'
    )

      super connection: connection, adapter: adapter, timeout: timeout,
            max_retries: max_retries, retry_interval: retry_interval,
            backoff_factor: backoff_factor, retry_statuses: retry_statuses,
            retry_methods: retry_methods, http_callback: http_callback

      # Current API environment
      @environment = String(environment)

      # The object holding OAuth 2 Client Credentials Grant credentials
      @thingspace_oauth_credentials = thingspace_oauth_credentials

      # The object holding Custom Header Signature credentials
      @vz_m2m_session_token_credentials = vz_m2m_session_token_credentials

      # The VZ-M2M session token from [Getting Started](/content/thingspace-portal/documentation/apis/connectivity-management/get-started.html)
      @vz_m2_m_token = vz_m2_m_token

      # The Http Client to use for making requests.
      set_http_client CoreLibrary::FaradayClient.new(self)
    end

    def clone_with(connection: nil, adapter: nil, timeout: nil,
                   max_retries: nil, retry_interval: nil, backoff_factor: nil,
                   retry_statuses: nil, retry_methods: nil, http_callback: nil,
                   environment: nil, thingspace_oauth_credentials: nil,
                   vz_m2m_session_token_credentials: nil, vz_m2_m_token: nil)
      connection ||= self.connection
      adapter ||= self.adapter
      timeout ||= self.timeout
      max_retries ||= self.max_retries
      retry_interval ||= self.retry_interval
      backoff_factor ||= self.backoff_factor
      retry_statuses ||= self.retry_statuses
      retry_methods ||= self.retry_methods
      http_callback ||= self.http_callback
      environment ||= self.environment
      thingspace_oauth_credentials ||= self.thingspace_oauth_credentials
      vz_m2m_session_token_credentials ||= self.vz_m2m_session_token_credentials
      vz_m2_m_token ||= self.vz_m2_m_token

      Configuration.new(
        connection: connection, adapter: adapter, timeout: timeout,
        max_retries: max_retries, retry_interval: retry_interval,
        backoff_factor: backoff_factor, retry_statuses: retry_statuses,
        retry_methods: retry_methods, http_callback: http_callback,
        environment: environment,
        thingspace_oauth_credentials: thingspace_oauth_credentials,
        vz_m2m_session_token_credentials: vz_m2m_session_token_credentials,
        vz_m2_m_token: vz_m2_m_token
      )
    end


    # All the environments the SDK can run in.
    ENVIRONMENTS = {
      Environment::PRODUCTION => {
        Server::OAUTH_SERVER => 'https://thingspace.verizon.com/api/ts/v1',
        Server::THINGSPACE => 'https://thingspace.verizon.com/api'
      },
      Environment::STAGING => {
        Server::OAUTH_SERVER => 'https://staging.thingspace.verizon.com/api/ts/v1',
        Server::THINGSPACE => 'https://staging.thingspace.verizon.com/api'
      }
    }.freeze

    # Generates the appropriate base URI for the environment and the server.
    # @param [Configuration::Server] server The server enum for which the base URI is
    # required.
    # @return [String] The base URI.
    def get_base_uri(server = Server::THINGSPACE)
      ENVIRONMENTS[environment][server].clone
    end
  end
end
