# verizon_thing_space_quality_of_service_api_endpoints
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module VerizonThingSpaceQualityOfServiceApiEndpoints
  #  verizon_thing_space_quality_of_service_api_endpoints client class.
  class Client
    include CoreLibrary
    attr_reader :config, :auth_managers

    # Returns the configured authentication thingspace_oauth instance.
    def thingspace_oauth
      @auth_managers['thingspace_oauth']
    end

    # Access to thing_space_quality_of_service_api_actions controller.
    # @return [ThingSpaceQualityOfServiceAPIActionsController] Returns the controller instance.
    def thing_space_quality_of_service_api_actions
      @thing_space_quality_of_service_api_actions ||= ThingSpaceQualityOfServiceAPIActionsController.new @global_configuration
    end

    # Access to exclusions controller.
    # @return [ExclusionsController] Returns the controller instance.
    def exclusions
      @exclusions ||= ExclusionsController.new @global_configuration
    end

    # Access to o_auth_authorization controller.
    # @return [OAuthAuthorizationController] Returns the controller instance.
    def o_auth_authorization
      @o_auth_authorization ||= OAuthAuthorizationController.new @global_configuration
    end

    def initialize(
      connection: nil, adapter: :net_http_persistent, timeout: 60,
      max_retries: 0, retry_interval: 1, backoff_factor: 2,
      retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
      retry_methods: %i[get put], http_callback: nil,
      environment: Environment::PRODUCTION, thingspace_oauth_credentials: nil,
      vz_m2m_session_token_credentials: nil, vz_m2_m_token: 'TODO: Replace',
      config: nil
    )
      @config = if config.nil?
                  Configuration.new(
                    connection: connection, adapter: adapter, timeout: timeout,
                    max_retries: max_retries, retry_interval: retry_interval,
                    backoff_factor: backoff_factor,
                    retry_statuses: retry_statuses,
                    retry_methods: retry_methods, http_callback: http_callback,
                    environment: environment,
                    thingspace_oauth_credentials: thingspace_oauth_credentials,
                    vz_m2m_session_token_credentials: vz_m2m_session_token_credentials,
                    vz_m2_m_token: vz_m2_m_token
                  )
                else
                  config
                end

      @global_configuration = GlobalConfiguration.new(client_configuration: @config)
                                                 .base_uri_executor(@config.method(:get_base_uri))
                                                 .global_errors(BaseController::GLOBAL_ERRORS)
                                                 .user_agent(BaseController.user_agent)
                                                 .global_header('VZ-M2M-Token', @config.vz_m2_m_token)

      initialize_auth_managers(@global_configuration)
      @global_configuration = @global_configuration.auth_managers(@auth_managers)
    end

    # Initializes the auth managers hash used for authenticating API calls.
    # @param [GlobalConfiguration] global_config The global configuration of the SDK)
    def initialize_auth_managers(global_config)
      @auth_managers = {}
      http_client_config = global_config.client_configuration
      %w[thingspace_oauth vz-m2m-session_token].each { |auth| @auth_managers[auth] = nil }
      @auth_managers['thingspace_oauth'] = ThingspaceOauth.new(
        http_client_config.thingspace_oauth_credentials, global_config
      )
      @auth_managers['vz-m2m-session_token'] = VzM2mSessionToken.new(
        http_client_config.vz_m2m_session_token_credentials
      )
    end
  end
end
